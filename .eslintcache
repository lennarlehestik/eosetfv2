[{"/Users/vlad/Desktop/lennyetf/eosetfv2/src/index.js":"1","/Users/vlad/Desktop/lennyetf/eosetfv2/src/App.js":"2","/Users/vlad/Desktop/lennyetf/eosetfv2/src/BarChart.js":"3","/Users/vlad/Desktop/lennyetf/eosetfv2/src/reportWebVitals.js":"4","/Users/vlad/Desktop/lennyetf/eosetfv2/src/Poll.js":"5"},{"size":1810,"mtime":1664802202785,"results":"6","hashOfConfig":"7"},{"size":117861,"mtime":1665066013645,"results":"8","hashOfConfig":"7"},{"size":2875,"mtime":1625133910109,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":1610316645021,"results":"10","hashOfConfig":"7"},{"size":12152,"mtime":1636099860899,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1rlh2li",{"filePath":"15","messages":"16","errorCount":0,"warningCount":148,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/vlad/Desktop/lennyetf/eosetfv2/src/index.js",["26"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { UALProvider } from 'ual-reactjs-renderer'\nimport { Anchor } from 'ual-anchor'\nimport { Lynx } from 'ual-lynx'\nimport { TokenPocket } from 'ual-token-pocket'\nimport { Wombat } from 'ual-wombat'\nimport { EOSIOAuth } from 'ual-eosio-reference-authenticator'\nimport { Metamask } from 'ual-metamask'\n\n\nconst appName = \"EOSETF\";\n\nconst chain = {\n  chainId: \"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906\",\n  rpcEndpoints: [\n    {\n      protocol: \"https\",\n      host: \"eos.greymass.com\",\n      //https://dsp.maltablock.org\n      //host: \"dsp.airdropsdac.com\", https://node2.blockstartdsp.com\"dsp.eosphere.io\",https://dsp.eosdetroit.io,https://node1.eosdsp.com\n      port: \"\",\n    },\n  ],\n};\n\nconst anchor = new Anchor([chain], {\n  appName,\n});\n\nconst lynx = new Lynx([chain])\nconst tokenPocket = new TokenPocket([chain])\nconst wombat = new Wombat([chain], { appName: 'EOSETF' })\nconst eosioAuth = new EOSIOAuth([chain], { appName, protocol: 'eosio' })\nconst metamask = new Metamask([chain])\n\n\nconst supportedChains = [chain];\nconst supportedAuthenticators = [\n  anchor, lynx, tokenPocket, eosioAuth, metamask //wombat, scatter removed due to development server error (works in prod)\n];\n\nReactDOM.render(\n    <UALProvider\n      chains={supportedChains}\n      authenticators={supportedAuthenticators}\n      appName={appName}\n    >\n      <App />\n    </UALProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/vlad/Desktop/lennyetf/eosetfv2/src/App.js",["27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Slider } from \"@material-ui/core\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { withUAL } from \"ual-reactjs-renderer\";\nimport Swal from \"sweetalert2\";\nimport ReactTooltip from \"react-tooltip\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ReactGA from \"react-ga\";\nimport { Bar, Pie, Doughnut } from \"react-chartjs-2\";\nimport { Promise } from \"bluebird\";\nimport Poll from \"./Poll\";\nimport Countdown from \"react-countdown\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport TextField from \"@mui/material/TextField\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport Button from \"@mui/material/Button\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\n//import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport Switch from \"@mui/material/Switch\";\n\nconst CustomSlider = withStyles({\n  root: {\n    color: \"#52af77\",\n    height: 8,\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: \"#fff\",\n    border: \"2px solid currentColor\",\n    marginTop: -8,\n    marginLeft: -12,\n    \"&:focus, &:hover, &$active\": {\n      boxShadow: \"inherit\",\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: \"calc(-50% + 4px)\",\n  },\n  track: {\n    height: 8,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4,\n  },\n})(Slider);\n\nconst CssTextField = styled(TextField)({\n  \"& .css-18m8r0v\": {\n    color: \"#5A83F1\",\n  },\n  \"& .MuiInputAdornment-root\": {\n    color: \"#5A83F1\",\n  },\n  \"& .MuiInput-underline:after\": {\n    borderBottom: \"none\",\n  },\n  \"& .MuiOutlinedInput-root\": {\n    \"& fieldset\": {\n      border: \"none\",\n    },\n    \"&:hover fieldset\": {\n      border: \"none\",\n    },\n    \"&.Mui-focused fieldset\": {\n      border: \"none\",\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: \"14px\",\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: \"14px\",\n    color: \"#534C80\",\n    fontFamily: \"'Roboto', sans-serif\",\n    margin: 0,\n  },\n  summary: {\n    padding: 0,\n  },\n  slider2: {\n    color: \"#7FAAF5\",\n  },\n  circleprog: {\n    color: \"#7FAAF5\",\n  },\n  expansion: {\n    backgroundColor: \"rgba( 255, 255, 255, 0 )\",\n    boxShadow: \"none\",\n    borderRadius: \"100px\",\n    marginLeft: 0,\n  },\n  expansion2: {\n    fontSize: \"10px\",\n  },\n}));\n\nfunction App(props) {\n  const a11yProps = (index) => {\n    return {\n      id: `simple-tab-${index}`,\n      \"aria-controls\": `simple-tabpanel-${index}`,\n    };\n  };\n  const [tabbutton, setTabbutton] = useState(\"invest\");\n  const [depositamounteosetf, setDepositamounteosetf] = useState();\n  const [depositamounteos, setDepositamounteos] = useState(100);\n  const [selltokenamount, setSelltokenamount] = useState(1);\n\n  function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && <div>{children}</div>}\n      </div>\n    );\n  }\n\n  const classes = useStyles();\n\n  const {\n    ual: { showModal, hideModal, activeUser, login, logout },\n  } = props;\n  if (activeUser) {\n    const accountName = activeUser.getAccountName();\n    accountName.then(function (result) {\n      setAccountName(result);\n    });\n  }\n  const displayaccountname = () => {\n    if (accountname) {\n      return accountname;\n    }\n  };\n  const [drawerstate, setDrawerstate] = useState(false);\n  const [tokens, setTokens] = useState(1);\n  const [inliquidity, setInliquidity] = useState(0);\n  const [myshare, setMyshare] = useState(0);\n  const [stake, setStake] = useState(0);\n  const [stakemax, setStakemax] = useState(0);\n  const [timetilnext, setTimetilnext] = useState(0);\n  const [displaytime, setDisplaytime] = useState(0);\n  const [staketable, setStaketable] = useState();\n  const [redeemtokens, setRedeemtokens] = useState(0);\n  const [view, setView] = useState(\"create\");\n  const [accountname, setAccountName] = useState(\"\");\n\n  const logmeout = () => {\n    logout();\n    setAccountName(\"\");\n  };\n\n  const logmein = async () => {\n    await showModal()\n    setRefresh(refresh + 1)\n  }\n\n  const redemptionfee = 0.95;\n  const efxmult = 2.6911;\n  const dadmult = 0.880282;\n  const iqmult = 26.233;\n  const vigmult = 125.0;\n  const dappmult = 12.6263;\n  const boxmult = 0.036075;\n  const ogxmult = 2.13675214;\n\n  const chexmult = 56.9476082;\n  const pizzamult = 4.4696;\n  const dfsmult = 0.014;\n  const emtmult = 16.3399;\n  const dexmult = 3.385;\n  const tptmult = 17.9856;\n\n  const swal_success = (message) => {\n    const Toast = Swal.mixin({\n      toast: true,\n      position: \"bottom-end\",\n      showConfirmButton: false,\n      timer: 6000,\n      timerProgressBar: true,\n      onOpen: (toast) => {\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n      },\n    });\n    Toast.fire({\n      icon: \"success\",\n      title: message,\n    });\n  };\n\n  const swal_error = (message) => {\n    const Toast = Swal.mixin({\n      toast: true,\n      position: \"bottom-end\",\n      showConfirmButton: false,\n      timer: 6000,\n      timerProgressBar: true,\n      onOpen: (toast) => {\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n      },\n    });\n    Toast.fire({\n      icon: \"error\",\n      title: message,\n    });\n  };\n\n  const sucessstake = () => {\n    const Toast = Swal.mixin({\n      toast: true,\n      position: \"bottom-end\",\n      showConfirmButton: false,\n      timer: 6000,\n      timerProgressBar: true,\n      onOpen: (toast) => {\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n      },\n    });\n    Toast.fire({\n      icon: \"success\",\n      title: \"EOSETF successfully issued!\",\n    });\n  };\n\n  const sucessredemption = () => {\n    const Toast = Swal.mixin({\n      toast: true,\n      position: \"bottom-end\",\n      showConfirmButton: false,\n      timer: 6000,\n      timerProgressBar: true,\n      onOpen: (toast) => {\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n      },\n    });\n    Toast.fire({\n      icon: \"success\",\n      title: \"Tokens successfully redeemed!\",\n    });\n  };\n\n  const actionpuccis = (err) => {\n    const Toast = Swal.mixin({\n      toast: true,\n      position: \"bottom-end\",\n      showConfirmButton: false,\n      timer: 5000,\n      timerProgressBar: true,\n      didOpen: (toast) => {\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n      },\n    });\n    Toast.fire({\n      icon: \"error\",\n      title: err,\n    });\n  };\n\n  const [govrnprice, setGovrnprice] = useState({ rows: [] });\n  const [dadpriceeos, setDadprice] = useState({ rows: [] });\n  const [eosetfprice, setEosetfprice] = useState({ rows: [] });\n  const [etfprice, setEtfprice] = useState();\n  const [periodbutton, setPeriodbutton] = useState(\"a year\");\n\n  const [prices, setPrices] = useState([]);\n  const [chartprices, setChartPrices] = useState([]);\n  const [refresh, setRefresh] = useState(0);\n  const [eosusdt, setEosusdt] = useState();\n  const [dividendflag, setDividendflag] = useState();\n  const [dividendflagcetf, setDividendflagcetf] = useState();\n\n  const [eosetfbalance, setEosetf] = useState({ rows: [] });\n  const [etfbalance, setEtf] = useState({ rows: [] });\n  const [eosetfbalanceind, setEosetfind] = useState({ rows: [] });\n  const [etfbalanceind, setEtfind] = useState({ rows: [] });\n\n  const [dividendclaim, setDividendclaim] = useState(0);\n  const [fulldata, setFulldata] = useState([]);\n  const [fulldataprices, setFulldataprices] = useState();\n  const [portfoliodata, setPortfoliodata] = useState();\n  const [withdrawamounts, setWithdrawamounts] = useState([]);\n  const [checked, setChecked] = useState(false);\n  const [checked1, setChecked1] = useState(false);\n  const [historicalprices, setHistoricalprices] = useState();\n\n  const handleSwitchChange = (event) => {\n    setChecked(event.target.checked);\n  };\n  const handleSwitchChange1 = (event) => {\n    setChecked1(event.target.checked);\n  };\n\n  const Completionist = () => (\n    <div class=\"flexalign\">\n      <div class=\"stakestat\">Period has ended!</div>\n      <div class=\"stakedescriptor\">Claim dividend to start new period.</div>\n    </div>\n  );\n\n  const endpoint = \"https://api.main.alohaeos.com\";\n  // Renderer callback with condition\n  const renderer = ({ hours, minutes, seconds, completed }) => {\n    if (completed) {\n      // Render a completed state\n      return <Completionist />;\n    } else {\n      // Render a countdown\n      return (\n        <div class=\"flexalign\">\n          <div class=\"stakestat\">\n            {hours}:{minutes}:{seconds}\n          </div>\n          <div class=\"stakedescriptor\">Time until end of period</div>\n        </div>\n      );\n    }\n  };\n\n  useEffect(async () => {\n    const block_time = 3;\n    const year_blocks = 31104000 / block_time;\n    const six_month_blocks = 15552000 / block_time;\n    const month_blocks = 2592000 / block_time;\n    let headblock;\n\n    await fetch(`${endpoint}/v1/chain/get_info`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    }).then((response) =>\n      response.json().then((info) => {\n        headblock = info.head_block_num;\n      })\n    );\n    const year_blocks_ago = headblock - year_blocks;\n    const six_month_blocks_ago = headblock - six_month_blocks;\n    const month_blocks_ago = headblock - month_blocks;\n    let year_price;\n    let six_month_price;\n    let month_price;\n    let current_price;\n\n    await fetch(\n      `https://eos.dfuse.eosnation.io/v0/state/table/row?account=swap.defi&scope=swap.defi&table=pairs&key_type=uint64&block_num=${year_blocks_ago}&primary_key=1232&json=true`,\n      {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    ).then((response) =>\n      response.json().then((val) => {\n        year_price = val.row.json.price1_last;\n      })\n    );\n    await fetch(\n      `https://eos.dfuse.eosnation.io/v0/state/table/row?account=swap.defi&scope=swap.defi&table=pairs&key_type=uint64&block_num=${six_month_blocks_ago}&primary_key=1232&json=true`,\n      {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    ).then((response) =>\n      response.json().then((val) => {\n        six_month_price = val.row.json.price1_last;\n      })\n    );\n    await fetch(\n      `https://eos.dfuse.eosnation.io/v0/state/table/row?account=swap.defi&scope=swap.defi&table=pairs&key_type=uint64&block_num=${month_blocks_ago}&primary_key=1232&json=true`,\n      {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    ).then((response) =>\n      response.json().then((val) => {\n        month_price = val.row.json.price1_last;\n      })\n    );\n    await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"swap.defi\",\n        table: \"pairs\",\n        scope: \"swap.defi\",\n        lower_bound: 1232,\n        upper_bound: 1232,\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((val) => {\n        current_price = val.rows[0].price1_last;\n      })\n    );\n    const data = [];\n    data[\"a year\"] = (100 + (current_price - year_price) * 100).toFixed(2);\n    data[\"six months\"] = (\n      100 +\n      (current_price - six_month_price) * 100\n    ).toFixed(2);\n    data[\"a month\"] = (100 + (current_price - month_price) * 100).toFixed(2);\n    setHistoricalprices(data);\n  }, []);\n\n  const refresher = () => {\n    setAccountName(\"\");\n    setTimeout(() => {\n      if (activeUser) {\n        const accountName = activeUser.getAccountName();\n        accountName.then(function (result) {\n          setAccountName(result);\n        });\n      }\n    }, 100);\n  };\n\n  const menuClick = (which) => {\n    setView(which);\n    setDrawerstate(false);\n  };\n\n  useEffect(() => {\n    fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"swap.defi\",\n        table: \"pairs\",\n        scope: \"swap.defi\",\n        lower_bound: 588,\n        upper_bound: 588,\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((dadpriceeos) => setDadprice(dadpriceeos))\n    );\n    fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"swap.defi\",\n        table: \"pairs\",\n        scope: \"swap.defi\",\n        lower_bound: 12,\n        upper_bound: 12,\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((price) => setEosusdt(price.rows[0].price0_last))\n    );\n  }, [accountname]);\n\n  const mainfunc = useCallback(async () => {\n    const data = [];\n    await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"swap.defi\",\n        table: \"pairs\",\n        scope: \"swap.defi\",\n        lower_bound: \"1232\",\n        upper_bound: \"1232\",\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((result) => {\n        data.defibox = result.rows[0];\n      })\n    );\n\n    data.reserve0overliquidity =\n      Number(data.defibox.reserve0.split(\" \")[0]) /\n      data.defibox.liquidity_token;\n    data.reserve1overliquidity =\n      Number(data.defibox.reserve1.split(\" \")[0]) /\n      data.defibox.liquidity_token;\n\n    await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"lptoken.defi\",\n        table: \"accounts\",\n        scope: activeUser?.accountName,\n        lower_bound: \"BOXAUJ\",\n        upper_bound: \"BOXAUJ\",\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((result) => {\n        if (result?.rows[0]?.balance) {\n          data.boxaujbalance = result.rows[0];\n          const inliquidity =\n            (Number(data.defibox.reserve0.split(\" \")[0]) /\n              Number(data.defibox.liquidity_token)) *\n            Number(result?.rows[0]?.balance.split(\" \")[0]);\n          setInliquidity(inliquidity);\n        } else {\n          data.boxaujbalance = { balance: \"0 BOXAUJ\" };\n        }\n      })\n    );\n\n    if (activeUser !== null) {\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"eosio.token\",\n          table: \"accounts\",\n          scope: activeUser?.accountName,\n          lower_bound: \"EOS\",\n          upper_bound: \"EOS\",\n          limit: 1,\n        }),\n      }).then((response) =>\n        response.json().then((result) => {\n          if (result?.rows[0]?.balance) {\n            data.eosbalance = result.rows[0];\n          } else {\n            data.eosbalance = { balance: \"0.0000 EOS\" };\n          }\n        })\n      );\n    }\n    else {\n      data.eosbalance = { balance: \"0.0000 EOS\" };\n    }\n\n    await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"cet.f\",\n        table: \"accounts\",\n        scope: activeUser?.accountName,\n        lower_bound: \"EOSETF\",\n        upper_bound: \"EOSETF\",\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((result) => {\n        if (result?.rows[0]?.balance) {\n          data.eosetfbalance = result.rows[0];\n        } else {\n          data.eosetfbalance = { balance: \"0.0000 EOSETF\" };\n        }\n      })\n    );\n\n    await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"cet.f\",\n        table: \"accounts\",\n        scope: activeUser?.accountName,\n        lower_bound: \"CETF\",\n        upper_bound: \"CETF\",\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((result) => {\n        if (result?.rows[0]?.balance) {\n          data.cetfbalance = result.rows[0];\n        } else {\n          data.cetfbalance = { balance: \"0.0000 CETF\" };\n        }\n      })\n    );\n\n    await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"swap.defi\",\n        table: \"pairs\",\n        scope: \"swap.defi\",\n        lower_bound: \"12\",\n        upper_bound: \"12\",\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((result) => {\n        data.eosdefibox = result.rows[0];\n      })\n    );\n\n    let boxaujsum;\n\n    await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"consortiumtt\",\n        table: \"indstkdetf\",\n        scope: activeUser?.accountName,\n        limit: 100,\n      }),\n    }).then((response) =>\n      response.json().then((res) => {\n        if (activeUser?.accountName) {\n          data.alldeposits = res.rows;\n          if (res.rows.length > 0) {\n            const sum = res?.rows\n              .map((o) => Number(o.staked.split(\" \")[0]))\n              .reduce((a, c) => {\n                return a + c;\n              });\n            boxaujsum = sum;\n          }\n          console.log(res.rows)\n        }\n      })\n    );\n    let share;\n    await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"consortiumtt\",\n        table: \"totstk\",\n        scope: \"consortiumtt\",\n        limit: 100,\n      }),\n    }).then((response) =>\n      response.json().then((res) => {\n        if (accountname) {\n          share =\n            Number(boxaujsum) / Number(res.rows[0].totstketf.split(\" \")[0]);\n        }\n      })\n    );\n\n    await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"consortiumtt\",\n        table: \"divperiod\",\n        scope: \"consortiumtt\",\n        limit: 100,\n      }),\n    }).then((response) =>\n      response.json().then((res) => {\n        if (accountname) {\n          const claimperiod = res?.rows[0].claimperiod;\n          const interval = 1200;\n          const seconds_passed = 300 * claimperiod;\n          const halvings = Math.floor(seconds_passed / interval).toFixed(0);\n          const initial_reward = 1250000;\n          const divider = Math.pow(2, halvings);\n          const adjusted_reward = (initial_reward / divider) * share;\n          if (adjusted_reward) {\n            setMyshare(adjusted_reward);\n          }\n        }\n      })\n    );\n\n    setDepositamounteosetf(\n      parseFloat(depositamounteos / Number(data.defibox.price1_last)).toFixed(4)\n    );\n    data.eosetfpriceineos = Number(data.defibox.price1_last);\n    data.eosetfpriceinusd =\n      Number(data.defibox.price1_last) * Number(data.eosdefibox.price0_last);\n    data.eospriceinusd = Number(data.eosdefibox.price0_last);\n    data.eosetfinusd =\n      Number(data.defibox.price1_last) *\n      Number(data.eosdefibox.price0_last) *\n      Number(data?.eosetfbalance?.balance.split(\" \")[0]);\n    data.eosinusd =\n      Number(data.eosdefibox.price0_last) *\n      Number(data?.eosbalance?.balance.split(\" \")[0]);\n    let withdrawamounts = [];\n    data?.alldeposits?.forEach((value, index) => {\n      withdrawamounts.push({ index: index, withdrawamount: 0 });\n    });\n    setWithdrawamounts(withdrawamounts);\n    setPortfoliodata(data);\n\n  }, [activeUser])\n\n  useEffect(() => {\n    mainfunc()\n  }, [mainfunc]);\n\n  const withdrawhandler = (index, amount) => {\n    let withdraw = withdrawamounts;\n    withdraw[index].withdrawamount = amount;\n    setWithdrawamounts(withdraw);\n  };\n\n  const withdraw = async (index) => {\n    const finalamount = Math.floor(\n      (Number(withdrawamounts[index].withdrawamount) / 100) *\n      Number(portfoliodata.alldeposits[index].staked.split(\" \")[0])\n    );\n    if (activeUser) {\n      try {\n        const transaction = {\n          actions: [\n            {\n              account: \"consortiumtt\",\n              name: \"unstakeetf\",\n              authorization: [\n                {\n                  actor: displayaccountname(), // use account that was logged in\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                user: displayaccountname(),\n                quantity: [`${finalamount} BOXAUJ`],\n                id: [index],\n                clmspecifier: \"cetfcetfcetf\",\n              },\n            },\n          ],\n        };\n        await activeUser.signTransaction(transaction, {\n          broadcast: true,\n          expireSeconds: 300,\n        });\n        swal_success(`${finalamount} ETF unstaked!`);\n        setTimeout(() => {\n          setRefresh(refresh + 1);\n        }, 3000);\n      } catch (e) {\n        swal_error(e);\n      }\n    }\n  };\n\n  const selltokens = async () => {\n    const reserve0 = Number(eosetfprice?.rows[0]?.reserve0.split(\" \")[0]);\n    const reserve1 = Number(eosetfprice?.rows[0]?.reserve1.split(\" \")[0]);\n    const slippage =\n      reserve0 / reserve1 / (reserve0 / (reserve1 + Number(selltokenamount)));\n    if ((slippage - 1) * 100 > 3) {\n      swal_error(\n        \"Slippage is higher than 3%. (\" +\n        ((slippage - 1) * 100).toFixed(2) +\n        \"%)\"\n      );\n      return;\n    }\n    /**slippage = reserve0/reserve1/(reserve0/(reserve1+multparse))\n\nmultparse = parseFloat((mult * tokenamount)).toFixed(nr)\n\nmult = Number(value.minamount.split(\" \")[0])**/\n\n    if (activeUser) {\n      try {\n        const transaction = {\n          actions: [\n            {\n              account: \"consortiumtt\",\n              name: \"transfer\",\n              authorization: [\n                {\n                  actor: displayaccountname(),\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                from: displayaccountname(),\n                to: \"swap.defi\",\n                quantity: parseFloat(selltokenamount).toFixed(4) + \" EOSETF\",\n                memo: \"swap,0,1743\",\n              },\n            },\n          ],\n        };\n        await activeUser.signTransaction(transaction, {\n          broadcast: true,\n          expireSeconds: 300,\n        });\n        swal_success(`${selltokenamount} EOSETF sold!`);\n        setTimeout(() => {\n          setRefresh(refresh + 1);\n        }, 3000);\n      } catch (e) {\n        swal_error(e);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"swap.defi\",\n        table: \"pairs\",\n        scope: \"swap.defi\",\n        lower_bound: 1232,\n        upper_bound: 1232,\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((eosetfprice) => setEosetfprice(eosetfprice))\n    );\n  }, [accountname]);\n\n  const getdadprice = () => {\n    if (dadpriceeos.rows[0]) {\n      return Number(dadpriceeos.rows[0].price1_last);\n    } else {\n      return 0;\n    }\n  };\n\n  const geteosetfprice = () => {\n    if (eosetfprice.rows[0]) {\n      return Number(eosetfprice.rows[0].price1_last);\n    } else {\n      return 0;\n    }\n  };\n\n  const getpricesum = () => {\n    if (prices) {\n      return (\n        getprice(\"box\") * boxmult +\n        getprice(\"ogx\") * ogxmult +\n        getprice(\"iq\") * iqmult +\n        getprice(\"dapp\") * dappmult +\n        getprice(\"vig\") * vigmult +\n        getprice(\"efx\") * efxmult +\n        getprice(\"chex\") * chexmult +\n        getprice(\"pizza\") * pizzamult +\n        getprice(\"dfs\") * dfsmult +\n        getprice(\"emt\") * emtmult +\n        getprice(\"dex\") * dexmult +\n        getprice(\"tpt\") * tptmult +\n        getdadprice() * dadmult\n      );\n    }\n  };\n\n  useEffect(() => {\n    const newdexcomms = [\n      { community: \"box\", symbol: \"token.defi-box-eos\" },\n      { community: \"ogx\", symbol: \"core.ogx-ogx-eos\" },\n      { community: \"iq\", symbol: \"everipediaiq-iq-eos\" },\n      { community: \"dapp\", symbol: \"dappservices-dapp-eos\" },\n      { community: \"vig\", symbol: \"vig111111111-vig-eos\" },\n      { community: \"efx\", symbol: \"effecttokens-efx-eos\" },\n      { community: \"chex\", symbol: \"chexchexchex-chex-eos\" },\n      { community: \"pizza\", symbol: \"pizzatotoken-pizza-eos\" },\n      { community: \"dfs\", symbol: \"minedfstoken-dfs-eos\" },\n      { community: \"emt\", symbol: \"emanateoneos-emt-eos\" },\n      { community: \"dex\", symbol: \"token.newdex-dex-eos\" },\n      { community: \"tpt\", symbol: \"eosiotptoken-tpt-eos\" },\n    ];\n    newdexcomms.forEach((item) => {\n      fetch(\"https://api.newdex.io/v1/price?symbol=\" + item.symbol)\n        .then((response) => response.json())\n        .then((data) => {\n          Object.assign(item, { price: data?.data?.price });\n          setPrices([...newdexcomms]);\n        });\n    });\n  }, []);\n\n  const getprice = (community) => {\n    if (prices) {\n      const datar = prices.filter(function (data) {\n        return data.community == community;\n      });\n      if (datar[0]) return datar[0].price;\n    }\n  };\n\n  const senddeposit = async () => {\n    if (activeUser) {\n      const boxaujtransfer = Math.floor(\n        (Number(portfoliodata?.defibox?.liquidity_token) /\n          Number(portfoliodata?.defibox?.reserve0?.split(\" \")[0])) *\n        depositamounteos\n      );\n      try {\n        const transaction = {\n          actions: [\n            {\n              account: \"eosio.token\",\n              name: \"transfer\",\n              authorization: [\n                {\n                  actor: displayaccountname(),\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                from: displayaccountname(),\n                to: \"swap.defi\",\n                quantity: parseFloat(depositamounteos).toFixed(4) + \" EOS\",\n                memo: \"deposit,1232\",\n              },\n            },\n            {\n              account: \"cet.f\",\n              name: \"transfer\",\n              authorization: [\n                {\n                  actor: displayaccountname(),\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                from: displayaccountname(),\n                to: \"swap.defi\",\n                quantity:\n                  parseFloat(depositamounteosetf).toFixed(4) + \" EOSETF\",\n                memo: \"deposit,1232\",\n              },\n            },\n            {\n              account: \"swap.defi\",\n              name: \"deposit\",\n              authorization: [\n                {\n                  actor: displayaccountname(),\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                owner: displayaccountname(),\n                pair_id: 1232,\n              },\n            },\n            {\n              account: \"lptoken.defi\",\n              name: \"transfer\",\n              authorization: [\n                {\n                  actor: displayaccountname(),\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                from: displayaccountname(),\n                to: \"consortiumtt\",\n                quantity: boxaujtransfer + \" BOXAUJ\",\n                memo: \"deposit,1232\",\n              },\n            },\n          ],\n        };\n        // The activeUser.signTransaction will propose the passed in transaction to the logged in Authenticator\n        await activeUser.signTransaction(transaction, {\n          broadcast: true,\n          expireSeconds: 300,\n        });\n        swal_success(\"Successfully staked!\");\n        setTimeout(() => {\n          setRefresh(refresh + 1);\n        }, 3000);\n      } catch (e) {\n        swal_error(e);\n      }\n    }\n  };\n\n  const deposit = (value, currency) => {\n    if (currency == \"EOS\") {\n      setDepositamounteos(value);\n      setDepositamounteosetf(\n        parseFloat(value / portfoliodata?.eosetfpriceineos).toFixed(4)\n      ); //SIIA HINNAGA KORRUTIS\n    } else {\n      setDepositamounteos(\n        parseFloat(value * portfoliodata?.eosetfpriceineos).toFixed(4)\n      );\n      setDepositamounteosetf(value);\n    }\n  };\n\n  const labelarray = (data) => {\n    const arr = [];\n    data?.forEach((i) => {\n      arr.push(i?.token?.split(\",\")[1]);\n    });\n    return arr;\n  };\n\n  useEffect(() => {\n    if (fulldata) {\n      const datar = fulldata;\n      datar.forEach((element, index, array) => {\n        fetch(`${endpoint}/v1/chain/get_table_rows`, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            json: true,\n            code: \"swap.defi\",\n            table: \"pairs\",\n            scope: \"swap.defi\",\n            lower_bound: datar[index].pairid,\n            upper_bound: datar[index].pairid,\n            limit: 1,\n          }),\n        })\n          .then((resp) => resp.json())\n          .then((data) => {\n            if (data?.rows[0]?.reserve0.split(\" \")[1] == \"EOS\") {\n              datar[index].price = Number(data?.rows[0].price1_last);\n            } else {\n              datar[index].price = Number(data?.rows[0]?.price0_last);\n            }\n          })\n          .then(() => {\n            const arr = [];\n            const eosetfpricearray = [];\n            const pricesum = datar\n              .map((p) => p.price * Number(p.minamount.split(\" \")[0]))\n              .reduce((a, b) => a + b);\n            datar.forEach((i) => {\n              //make result here (price * multiplier)/price_sum\n              const result = (\n                (Number(i.price) * Number(i.minamount.split(\" \")[0]) * 100) /\n                pricesum\n              ).toFixed(2);\n              arr.push(result);\n            });\n            setChartPrices(arr);\n            setEtfprice(pricesum);\n          })\n          .then(() => {\n            const prices = [];\n            datar.map((value, index) => {\n              prices.push(value?.price);\n            });\n            const pricesum = prices.reduce((a, b) => a + b, 0);\n          });\n      });\n    }\n  }, [fulldata]);\n\n  const data1 = {\n    labels: labelarray(fulldata),\n    datasets: [\n      {\n        label: \"ETF weight\",\n        fill: true,\n        lineTension: 0.1,\n        backgroundColor: [\n          \"#f17ae9\",\n          \"#f9a9f1\",\n          \"#fdd5f8\",\n          \"#ffffff\",\n          \"#7aa6e3\",\n          \"#8fe1ff\",\n          \"#21d2ff\",\n          \"#f9a9f1\",\n          \"#fdd5f8\",\n          \"#fffff5\",\n          \"#cbf0ff\",\n          \"#fbaaeb\",\n          \"#21d2f8\",\n        ],\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        data: chartprices,\n      },\n    ],\n  };\n\n  //price1_last\n  const getbalance = (row) => {\n    if (row.balance) {\n      return Number(row?.balance.split(\" \")[0]);\n    }\n  };\n\n  useEffect(() => {\n    fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"consortiumtt\",\n        table: \"rebalon\",\n        scope: \"consortiumtt\",\n        limit: 100,\n      }),\n    }).then((response) => response.json().then((res) => fetcher(res)));\n    //fetch main table\n    //for each row in main table, fetch more => append to items in main state\n    //outside of this function, start replacing hardcoded state with dynamic\n    const fetcher = (fetchdata) => {\n      setFulldata(fetchdata.rows);\n      if (fetchdata.rows) {\n        let data = fetchdata.rows;\n        data.forEach((element, index, array) => {\n          if (accountname) {\n            fetch(`${endpoint}/v1/chain/get_table_rows`, {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                json: true,\n                code: element.contract,\n                table: \"accounts\",\n                scope: displayaccountname(),\n                limit: 1,\n              }),\n            })\n              .then(function (response) {\n                if (response.ok) {\n                  return response;\n                }\n                data[index].balance =\n                  \"0.0000 \" + data[index].minamount.split(\" \")[1];\n              })\n              .then((response) =>\n                response?.json().then((balance) => {\n                  if (balance?.rows?.length !== 0) {\n                    attachbalance(balance?.rows[0]?.balance);\n                  } else {\n                    data[index].balance =\n                      \"0.0000 \" + data[index].minamount.split(\" \")[1];\n                  }\n                })\n              );\n          }\n          //FETCH HERE\n          //THEN data[index].newvalue = fetched_value\n          const attachbalance = (balance) => {\n            data[index].balance = balance;\n          };\n        });\n        setFulldata(data);\n\n        //TODO RIGHT NOW FOR PRICE SUM. NEED TO ADD MULTIPLIERS.\n      }\n    };\n  }, [accountname]);\n\n  useEffect(async () => {\n    if (accountname) {\n      let dividenddata = {};\n\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"consortiumtt\",\n          table: \"accounts\",\n          scope: displayaccountname(),\n          lower_bound: \"EOSETF\",\n          upper_bound: \"EOSETF\",\n          limit: 1,\n        }),\n      }).then((response) =>\n        response\n          .json()\n          .then((eosetfbalanceind) => setEosetfind(eosetfbalanceind))\n      );\n      let userstake;\n      let feetouser;\n\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"consortiumtt\",\n          table: \"accounts\",\n          scope: displayaccountname(),\n          limit: 1,\n          upper_bound: \"CETF\",\n          lower_bound: \"CETF\",\n        }),\n      }).then((response) =>\n        response.json().then((etfbalanceind) => {\n          setEtfind(etfbalanceind);\n\n          fetch(`${endpoint}/v1/chain/get_table_rows`, {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              json: true,\n              code: \"consortiumtt\",\n              table: \"persznstaked\",\n              scope: displayaccountname(),\n              limit: 100,\n            }),\n          }).then((response) =>\n            response.json().then((res) => {\n              const stakedamount = Number(\n                etfbalanceind?.rows[0]?.balance.split(\" \")[0]\n              );\n              if (stakedamount) {\n                setStakemax(stakedamount);\n                setStake(stakedamount);\n              }\n              if (res.rows[0]) {\n                dividenddata[\"stakedata\"] = res.rows;\n                const sum = res.rows\n                  .map((o) => Number(o.staked.split(\" \")[0]))\n                  .reduce((a, c) => {\n                    return a + c;\n                  });\n                const stakedamount =\n                  Number(etfbalanceind.rows[0].balance.split(\" \")[0]) - sum;\n                setStakemax(stakedamount);\n                setStake(stakedamount);\n\n                setStaketable(res);\n                userstake = stakedamount;\n              }\n            })\n          );\n        })\n      );\n\n      //DIV PERIODSTART AND TOTAL CLAIM PERIOD\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"consortiumtt\",\n          table: \"divperiod\",\n          scope: \"consortiumtt\",\n          limit: 1,\n        }),\n      }).then((response) =>\n        response.json().then((res) => {\n          dividenddata[\"periodstart\"] = res.rows[0].periodstart;\n          dividenddata[\"totalclaimperiod\"] = res.rows[0].claimperiod;\n        })\n      );\n\n      //PERIOD FREQUENCY\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"consortiumtt\",\n          table: \"clmperfreq\",\n          scope: \"consortiumtt\",\n          limit: 1,\n        }),\n      }).then((response) =>\n        response.json().then((res) => {\n          dividenddata[\"periodfreq\"] = res.rows[0].periodfreq;\n        })\n      );\n\n      //TOTAL STAKED\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"consortiumtt\",\n          table: \"totstk\",\n          scope: \"consortiumtt\",\n          limit: 1,\n        }),\n      }).then((response) =>\n        response.json().then((res) => {\n          dividenddata[\"totalstaked\"] = res?.rows[0]?.totalstaked;\n          feetouser =\n            userstake / Number(res?.rows[0]?.totalstaked.split(\" \")[0]);\n        })\n      );\n\n      //ETF FEES\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"consortiumtt\",\n          table: \"etffees\",\n          scope: \"consortiumtt\",\n          limit: 1,\n        }),\n      }).then((response) =>\n        response.json().then((res) => {\n          dividenddata[\"totalfees\"] = res.rows[0].totalfees;\n        })\n      );\n\n      //FEES ADJUST\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"consortiumtt\",\n          table: \"feesadjust\",\n          scope: \"consortiumtt\",\n          limit: 1,\n        }),\n      }).then((response) =>\n        response.json().then((res) => {\n          dividenddata[\"adjustcrtclm\"] = res.rows[0].adjustcrtclm;\n        })\n      );\n\n      //CLAIM TIME EOSETF\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"consortiumtt\",\n          table: \"claimtime\",\n          scope: \"eosetfeosetf\",\n          lower_bound: displayaccountname(),\n          upper_bound: displayaccountname(),\n          limit: 1,\n        }),\n      }).then((response) =>\n        response.json().then((res) => {\n          if (res?.rows[0]?.claimperiod) {\n            dividenddata[\"userclaimperiod\"] = res.rows[0].claimperiod;\n          } else {\n            dividenddata[\"userclaimperiod\"] = false;\n          }\n        })\n      );\n\n      //CLAIMTIME CETF\n      await fetch(`${endpoint}/v1/chain/get_table_rows`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          json: true,\n          code: \"consortiumtt\",\n          table: \"claimtime\",\n          scope: \"cetfcetfcetf\",\n          lower_bound: displayaccountname(),\n          upper_bound: displayaccountname(),\n          limit: 1,\n        }),\n      }).then((response) =>\n        response.json().then((res) => {\n          if (res?.rows[0]?.claimperiod) {\n            dividenddata[\"userclaimperiodcetf\"] = res.rows[0].claimperiod;\n          } else {\n            dividenddata[\"userclaimperiodcetf\"] = false;\n          }\n        })\n      );\n\n      /** \n      if \n        {\n        (staketime + periodfreq)  < current time\n        }\n\n    {\n        \"totalstaked\": \"132.0000 CETF\",\n        \"totalfees\": \"0.0166 EOSETF\",\n        \"userclaimperiod\": false,\n        \"periodfreq\": 300,\n        \"adjustcrtclm\": \"0.0000 EOSETF\",\n        \"periodstart\": \"2021-12-04T15:53:39\",\n        \"totalclaimperiod\": 17,\n        \"staked\": \"30.0000 CETF\",\n        \"staketime\": \"2021-12-04T13:23:00\"\n    }\n    **/\n      const now = new Date(\n        Date.now() + new Date().getTimezoneOffset() * 60000\n      ).getTime();\n\n      const timetilnextperiod =\n        Date.parse(dividenddata.periodstart) +\n        dividenddata.periodfreq * 1000 -\n        now;\n      if (timetilnextperiod / 1000 > 86400) {\n        setDisplaytime(\n          (timetilnextperiod / 1000 / 60 / 60 / 24).toFixed(0) + \" days\"\n        );\n      }\n      if (timetilnextperiod / 1000 < 86400) {\n        setDisplaytime((timetilnextperiod / 1000 / 60 / 60).toFixed(0) + \" h\");\n      }\n      if (timetilnextperiod / 1000 < 3600) {\n        setDisplaytime((timetilnextperiod / 1000 / 60).toFixed(0) + \" min\");\n      }\n      if (timetilnextperiod / 1000 < 0) {\n        setDisplaytime(\"Claim\");\n      }\n\n      if (timetilnextperiod - Number(dividenddata.periodfreq) > 0) {\n        setTimetilnext(\n          100 -\n          (100 * (timetilnextperiod / 1000)) / Number(dividenddata.periodfreq)\n        );\n      } else {\n        setTimetilnext(100);\n      }\n      if (dividenddata.stakedata && accountname) {\n        dividenddata.stakedata.map((row, index) => {\n          if (\n            Date.parse(row.staketime) + dividenddata.periodfreq * 1000 >\n            now\n          ) {\n            //keep it. else dump it from stakes as it doesn't count.\n            dividenddata.stakedata[index].flag = true;\n          } else {\n            dividenddata.stakedata[index].flag = false;\n          }\n        });\n\n        //How much user gets\n        let substract = 0;\n        dividenddata.stakedata.forEach((row) => {\n          if (\n            Date.parse(row.staketime) + dividenddata.periodfreq * 1000 >\n            now\n          ) {\n            substract += Number(row.staked.split(\" \")[0]);\n          }\n        });\n        const percgets =\n          dividenddata.stakedata\n            .filter((x) => x.flag == false)\n            .reduce((a, b) => a + Number(b.staked.split(\" \")[0]), 0) /\n          (Number(dividenddata.totalstaked.split(\" \")[0]) - substract);\n\n        // Lenny trust me, cetf and eosetf periods don't go out of sync.\n        //kaks varianti. if not equal to period, if equal to period.\n        let dividend;\n        if (\n          Date.parse(dividenddata.periodstart) +\n          dividenddata.periodfreq * 1000 <\n          now\n        ) {\n          //kui periood on läbi, siis arvuta dividend nii\n          dividend =\n            percgets *\n            (Number(dividenddata.totalfees.split(\" \")[0]) +\n              Number(dividenddata.adjustcrtclm.split(\" \")[0]));\n        } else {\n          //kui periood käib, siis arvuta dividend nii\n          dividend = percgets * Number(dividenddata.totalfees.split(\" \")[0]);\n        }\n        setDividendclaim(dividend);\n        if (dividenddata.userclaimperiod == dividenddata.totalclaimperiod) {\n          setDividendclaim(dividend);\n          setDividendflag(true);\n        } else {\n          setDividendclaim(dividend);\n          setDividendflag(false);\n        }\n\n        //CETF FLAG\n        if (dividenddata.userclaimperiod == dividenddata.totalclaimperiod) {\n          setDividendflagcetf(true);\n        } else {\n          setDividendflagcetf(false);\n        }\n      } else {\n        setDividendclaim(0);\n      }\n    }\n  }, [accountname, refresh]);\n\n  useEffect(() => {\n    fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"consortiumtt\",\n        table: \"accounts\",\n        scope: displayaccountname(),\n        lower_bound: \"CETF\",\n        upper_bound: \"CETF\",\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((etfbalanceind) => setEtfind(etfbalanceind))\n    );\n  }, [accountname]);\n\n  useEffect(() => {\n    fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"consortiumtt\",\n        table: \"stat\",\n        scope: \"CETF\",\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((etfbalance) => setEtf(etfbalance))\n    );\n  }, [accountname]);\n\n  useEffect(() => {\n    fetch(`${endpoint}/v1/chain/get_table_rows`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"consortiumtt\",\n        table: \"stat\",\n        scope: \"EOSETF\",\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((eosetfbalance) => setEosetf(eosetfbalance))\n    );\n  }, [accountname]);\n\n  const gettokenbalance = (token) => {\n    if (token.rows[0]) {\n      return Number(token.rows[0].balance.split(\" \")[0]);\n    } else {\n      return 0;\n    }\n  };\n\n  const gettokenbalanceone = (token) => {\n    if (token.rows[0]) {\n      return Math.floor(Number(token.rows[0].balance.split(\" \")[0]));\n      //return (token.rows[0].balance);\n    } else {\n      return 0;\n    }\n  };\n\n  const gettokenbalancetwo = (token) => {\n    if (token.rows[1]) {\n      return Math.floor(Number(token.rows[1].balance.split(\" \")[0]));\n    } else {\n      return 0;\n    }\n  };\n\n  const gettokensupply = (token) => {\n    if (token.rows[0]) {\n      return Math.floor(Number(token.rows[0].supply.split(\" \")[0]));\n    } else {\n      return 0;\n    }\n  };\n\n  const halvingdivider = () => {\n    if (etfbalance.rows[0]) {\n      return parseInt(\n        Math.pow(\n          2,\n          parseInt(\n            Math.floor(Number(etfbalance.rows[0].supply.split(\" \")[0])) /\n            20000000\n          )\n        )\n      );\n    }\n  };\n\n  const creationreward = () => {\n    return parseInt(80 / halvingdivider());\n  };\n\n  const halvings = (totalcirc) => {\n    if (totalcirc < 20000000) {\n      return 0;\n    } else if (totalcirc >> 20000000 && totalcirc < 40000000) {\n      return 1;\n    } else if (totalcirc >> 40000000 && totalcirc < 60000000) {\n      return 2;\n    } else if (totalcirc >> 60000000 && totalcirc < 80000000) {\n      return 3;\n    }\n  };\n\n  const dynamicsend = (buy) => {\n    const fulldatacopy = fulldata.filter((item) => item.ratio > 0);\n    let alldata = [];\n    if (fulldatacopy) {\n      Promise.all(\n        fulldatacopy.map((value, index) => {\n          return new Promise((resolve) => {\n            fetch(`${endpoint}/v1/chain/get_table_rows`, {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                json: true,\n                code: \"swap.defi\",\n                table: \"pairs\",\n                scope: \"swap.defi\",\n                lower_bound: fulldatacopy[index].pairid,\n                upper_bound: fulldatacopy[index].pairid,\n                limit: 1,\n              }),\n            })\n              .then((resp) => resp.json())\n              .then((data) => {\n                fulldatacopy[index].defibox = data;\n              })\n              .then(() => {\n                fulldatacopy.forEach((element, index, array) => {\n                  if (accountname) {\n                    fetch(`${endpoint}/v1/chain/get_table_rows`, {\n                      method: \"POST\",\n                      headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                      },\n                      body: JSON.stringify({\n                        json: true,\n                        code: element.contract,\n                        table: \"accounts\",\n                        scope: displayaccountname(),\n                        limit: 1,\n                      }),\n                    })\n                      .then(function (response) {\n                        if (response.ok) {\n                          return response;\n                        }\n                        attachbalance(\n                          \"0.0000 \" +\n                          fulldatacopy[index].minamount.split(\" \")[1]\n                        );\n                      })\n                      .then((response) =>\n                        response?.json().then((balance) => {\n                          if (balance?.rows?.length !== 0) {\n                            attachbalance(balance?.rows[0]?.balance);\n                          } else {\n                            attachbalance(\n                              \"0.0000 \" +\n                              fulldatacopy[index].minamount.split(\" \")[1]\n                            );\n                          }\n                        })\n                      );\n                  }\n                  //FETCH HERE\n                  //THEN data[index].newvalue = fetched_value\n                  const attachbalance = (balance) => {\n                    fulldatacopy[index].balance = balance;\n                  };\n                  resolve();\n                });\n              });\n          });\n        })\n      ).then(() => {\n        sender(fulldatacopy, buy);\n      });\n    }\n\n    const sender = async (totaldata, buyornot) => {\n      let tokenamount = tokens;\n      let slippagetoohigh = false;\n      let slippagelist = [];\n      const multparse = (mult, nr, bal) => {\n        if (bal) {\n          if (buyornot == true) {\n            return (\n              Number(parseFloat(mult * tokenamount).toFixed(nr)) -\n              parseFloat(bal?.split(\" \")[0])\n            );\n          } else {\n            return Number(parseFloat(mult * tokenamount).toFixed(nr));\n          }\n        }\n      };\n      const reserveparse = (token, reserve) => {\n        return Number(parseFloat(token?.rows[0][reserve]));\n      };\n      const slippageparseflip = (token, mult, nr, balance) => {\n        const slippage =\n          reserveparse(token, \"reserve1\") /\n          reserveparse(token, \"reserve0\") /\n          (reserveparse(token, \"reserve1\") /\n            (reserveparse(token, \"reserve0\") + multparse(mult, nr, balance)));\n        if ((slippage - 1) * 100 > 3) {\n          slippagelist.push({\n            token: token?.rows[0].reserve0.split(\" \")[1],\n            amount: ((slippage - 1) * 100).toFixed(2),\n          });\n          slippagetoohigh = true;\n        }\n        return slippage;\n      };\n      const slippageparse = (token, mult, nr, balance) => {\n        const slippage =\n          reserveparse(token, \"reserve0\") /\n          reserveparse(token, \"reserve1\") /\n          (reserveparse(token, \"reserve0\") /\n            (reserveparse(token, \"reserve1\") + multparse(mult, nr, balance)));\n        if ((slippage - 1) * 100 > 3) {\n          slippagelist.push({\n            token: token?.rows[0].reserve1.split(\" \")[1],\n            amount: ((slippage - 1) * 100).toFixed(2),\n          });\n          slippagetoohigh = true;\n        }\n        return slippage;\n      };\n      totaldata.map((value, index) => {\n        let buyamount;\n        if (value.defibox.rows[0].reserve0.split(\" \")[1] == \"EOS\") {\n          buyamount = (\n            (reserveparse(value.defibox, \"reserve0\") /\n              reserveparse(value.defibox, \"reserve1\")) *\n            1.003 *\n            multparse(\n              Number(value.minamount.split(\" \")[0]),\n              value.token.split(\",\")[0],\n              value.balance\n            ) *\n            slippageparse(\n              value.defibox,\n              Number(value.minamount.split(\" \")[0]),\n              value.token.split(\",\")[0],\n              value.balance\n            ) +\n            0.004\n          ).toFixed(4);\n        } else {\n          buyamount = (\n            (reserveparse(value.defibox, \"reserve1\") /\n              reserveparse(value.defibox, \"reserve0\")) *\n            1.003 *\n            multparse(\n              Number(value.minamount.split(\" \")[0]),\n              value.token.split(\",\")[0],\n              value.balance\n            ) *\n            slippageparseflip(\n              value.defibox,\n              Number(value.minamount.split(\" \")[0]),\n              value.token.split(\",\")[0],\n              value.balance\n            ) +\n            0.004\n          ).toFixed(4);\n        }\n        totaldata[index].buyamount = buyamount;\n      });\n\n      if (activeUser) {\n        try {\n          const transaction = {\n            actions: [],\n          };\n          totaldata.map((value, index) => {\n            transaction.actions.push({\n              account: value.contract,\n              name: \"transfer\",\n              authorization: [\n                {\n                  actor: displayaccountname(), // use account that was logged in\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                from: displayaccountname(),\n                to: \"consortiumtt\",\n                //quantity: 19.2562 * tokens + \" DAPP\",\n                memo: \"EOSETF creation through eosetf.io\",\n                quantity:\n                  parseFloat(\n                    value.minamount.split(\" \")[0] * tokenamount\n                  ).toFixed(value.token.split(\",\")[0]) +\n                  \" \" +\n                  value.token.split(\",\")[1],\n              },\n            });\n          });\n\n          totaldata.map((value, index) => {\n            if (\n              multparse(\n                value.minamount.split(\" \")[0],\n                value.token.split(\",\")[0],\n                value.balance\n              ) > 0\n            ) {\n              transaction.actions.unshift({\n                account: \"eosio.token\",\n                name: \"transfer\",\n                authorization: [\n                  {\n                    actor: displayaccountname(), // use account that was logged in\n                    permission: \"active\",\n                  },\n                ],\n                data: {\n                  from: displayaccountname(),\n                  to: \"swap.defi\",\n                  //quantity: 19.2562 * tokens + ' DAPP',\n                  memo: \"swap,0,\" + value.strpairid,\n                  quantity: value.buyamount + \" EOS\",\n                },\n              });\n            }\n          });\n\n          // The activeUser.signTransaction will propose the passed in transaction to the logged in Authenticator\n\n          if (buyornot == true && slippagetoohigh == false) {\n            await activeUser.signTransaction(transaction, {\n              broadcast: true,\n              expireSeconds: 300,\n            });\n            sucessstake();\n          } else if (buyornot == false && slippagetoohigh == false) {\n            await activeUser.signTransaction(transaction, {\n              broadcast: true,\n              expireSeconds: 300,\n            });\n            sucessstake();\n          } else {\n            var slippagemessage = \"\";\n            if (Object.keys(slippagelist).length > 1) {\n              slippagelist.forEach((item) => {\n                slippagemessage = slippagemessage.concat(\n                  item.token,\n                  \"(\",\n                  item.amount,\n                  \"%), \"\n                );\n              });\n            } else {\n              slippagemessage = slippagemessage.concat(\n                slippagelist[0].token,\n                \"(\",\n                slippagelist[0].amount,\n                \"%), \"\n              );\n            }\n\n            const message =\n              \"Slippage was higher than 3% for: \" +\n              slippagemessage.slice(0, -2) +\n              \".\";\n\n            const Toast = Swal.mixin({\n              toast: true,\n              position: \"bottom-end\",\n              showConfirmButton: false,\n              timer: 6000,\n              timerProgressBar: true,\n              onOpen: (toast) => {\n                toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n                toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n              },\n            });\n            Toast.fire({\n              icon: \"error\",\n              title: message,\n            });\n          }\n        } catch (error) {\n          actionpuccis(error.message);\n        }\n      } else {\n        showModal();\n      }\n    };\n  };\n\n  const unstake = async (index) => {\n    if (activeUser) {\n      try {\n        const transaction = {\n          actions: [\n            {\n              account: \"consortiumtt\",\n              name: \"unstakecetf\",\n              authorization: [\n                {\n                  actor: displayaccountname(), // use account that was logged in\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                user: displayaccountname(),\n                quantity: [staketable.rows[index].staked],\n                id: [staketable.rows[index].id],\n                clmspecifier: \"eosetfeosetf\",\n              },\n            },\n          ],\n        };\n        // The activeUser.signTransaction will propose the passed in transaction to the logged in Authenticator\n        await activeUser.signTransaction(transaction, {\n          broadcast: true,\n          expireSeconds: 300,\n        });\n        swal_success(\"Successfully unstaked!\");\n        setTimeout(() => {\n          setRefresh(refresh + 1);\n        }, 3000);\n      } catch (e) {\n        swal_error(e);\n      }\n    }\n  };\n\n  const getdiv = async () => {\n    if (activeUser) {\n      try {\n        const transaction = {\n          actions: [\n            {\n              account: \"consortiumtt\",\n              name: \"getdiv\",\n              authorization: [\n                {\n                  actor: displayaccountname(), // use account that was logged in\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                user: displayaccountname(),\n                clmspecifier: \"eosetfeosetf\",\n              },\n            },\n            {\n              account: \"consortiumtt\",\n              name: \"getcetf\",\n              authorization: [\n                {\n                  actor: displayaccountname(), // use account that was logged in\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                user: displayaccountname(),\n                clmspecifier: \"cetfcetfcetf\",\n              },\n            },\n          ],\n        };\n        // The activeUser.signTransaction will propose the passed in transaction to the logged in Authenticator\n        await activeUser.signTransaction(transaction, {\n          broadcast: true,\n          expireSeconds: 300,\n        });\n        swal_success(\"Dividends claimed!\");\n        setTimeout(() => {\n          setRefresh(refresh + 1);\n        }, 3000);\n      } catch (e) {\n        swal_error(e);\n      }\n    }\n  };\n\n  const stakeetf = async () => {\n    if (activeUser) {\n      try {\n        const transaction = {\n          actions: [\n            {\n              account: \"consortiumtt\",\n              name: \"stakecetf\",\n              authorization: [\n                {\n                  actor: displayaccountname(), // use account that was logged in\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                user: displayaccountname(),\n                quantity: stake.toFixed(4) + \" CETF\",\n                id: Math.floor(Math.random() * 1000000000),\n              },\n            },\n          ],\n        };\n        // The activeUser.signTransaction will propose the passed in transaction to the logged in Authenticator\n        await activeUser.signTransaction(transaction, {\n          broadcast: true,\n          expireSeconds: 300,\n        });\n        swal_success(\"Successfully staked \" + stake.toFixed(4) + \" CETF!\");\n        setTimeout(() => {\n          setRefresh(refresh + 1);\n        }, 2000);\n      } catch (e) {\n        swal_error(e);\n      }\n    }\n  };\n\n  const sendetf = async () => {\n    const {\n      ual: { login, displayError, showModal },\n    } = props;\n    // Via static contextType = UALContext, access to the activeUser object on this.context is now available\n    const {\n      ual: { activeUser },\n    } = props;\n\n    var eosetf = Number(redeemtokens).toFixed(4);\n\n    if (activeUser) {\n      try {\n        const transaction = {\n          actions: [\n            {\n              account: \"consortiumtt\",\n              name: \"transfer\",\n              authorization: [\n                {\n                  actor: displayaccountname(), // use account that was logged in\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                from: displayaccountname(),\n                to: \"consortiumtt\",\n                quantity: Number(selltokenamount).toFixed(4) + \" EOSETF\",\n                memo: \"EOSETF redemption through eosetf.io\",\n              },\n            },\n          ],\n        };\n        // The activeUser.signTransaction will propose the passed in transaction to the logged in Authenticator\n        await activeUser.signTransaction(transaction, {\n          broadcast: true,\n          expireSeconds: 300,\n        });\n\n        sucessredemption();\n      } catch (error) {\n        actionpuccis(error.message);\n      }\n    } else {\n      showModal();\n    }\n  };\n\n  const toggleDrawer = (open) => (event) => {\n    setDrawerstate(open);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div\n          class=\"outsidebutton githubbutton\"\n          onClick={() =>\n            window.open(\"https://github.com/n0umen0n/cetfphase2\", \"_blank\")\n          }\n        >\n          <img class=\"outsideimgright\" src=\"assets/github.png\" />\n          <div class=\"outsidebuttontext\">GIT</div>\n        </div>\n        <div\n          class=\"outsidebutton telegrambutton\"\n          onClick={() => window.open(\"https://t.me/eosetf\", \"_blank\")}\n        >\n          <img class=\"outsideimgright\" src=\"assets/telegram.webp\" />\n          <div class=\"outsidebuttontext\">TG</div>\n        </div>\n        <div\n          class=\"outsidebutton twitterbutton\"\n          onClick={() => window.open(\"https://twitter.com/CETF13\", \"_blank\")}\n        >\n          <img class=\"outsideimgright\" src=\"assets/twitter.png\" />\n          <div class=\"outsidebuttontext\">TWIT</div>\n        </div>\n        <div\n          class=\"outsidebutton mediumbutton\"\n          onClick={() => window.open(\"https://medium.com/@eosetf\", \"_blank\")}\n        >\n          <img class=\"outsideimgright\" src=\"assets/med.png\" />\n          <div class=\"outsidebuttontext\">MED</div>\n        </div>\n\n        <div class=\"maincard\">\n          <div\n            class=\"outsidebutton govrnbutton\"\n            onClick={() =>\n              window.open(\n                \"https://app.consortium.vote/community/zlmdhu2blclw\",\n                \"_blank\"\n              )\n            }\n          >\n            <img class=\"outsideimg\" src=\"assets/consologo.png\" />\n            <div class=\"outsidebuttontext\">VOTE</div>\n          </div>\n          <div\n            class=\"outsidebutton buybutton\"\n            onClick={() =>\n              window.open(\n                \"https://defibox.io/pool-market-details/1232\",\n                \"_blank\"\n              )\n            }\n          >\n            <img class=\"outsideimg\" src=\"assets/buylogo.png\" />\n            <div class=\"outsidebuttontext\">BUY/SELL</div>\n          </div>\n          <Drawer\n            anchor=\"right\"\n            open={drawerstate}\n            onClose={toggleDrawer(false)}\n            onOpen={toggleDrawer(true)}\n            opacity=\"0.5\"\n          >\n            <div class=\"sidemenu\">\n              <div class=\"mobilemenu\">\n                <div class=\"logo\">\n                  <img width=\"64px\" src=\"assets/logo.svg\" />\n                </div>\n                <div class=\"appname\">\n                  <a>CETF</a>\n                </div>\n                <div class=\"accountname\">\n                  {accountname == \"\" ? <a>not logged in</a> : accountname}\n                </div>\n                <div class=\"menuitemswrapper\">\n                  <table class=\"menuitems\">\n                    <tr onClick={() => menuClick(\"about\")}>\n                      <td>\n                        <img\n                          class=\"menuimg\"\n                          src=\"assets/iconmonstr-chart-11.svg\"\n                        />\n                      </td>\n                      <td>\n                        <a class=\"menuitemtext\">Tokens</a>\n                      </td>\n                    </tr>\n\n                    <tr onClick={() => menuClick(\"stats\")}>\n                      <td>\n                        <img class=\"menuimg\" src=\"assets/stats.svg\" />\n                      </td>\n                      <td>\n                        <a class=\"menuitemtext\">Tokenomics</a>\n                      </td>\n                    </tr>\n\n                    <tr\n                      onClick={() =>\n                        window.open(\n                          \"https://app.consortium.vote/community/zlmdhu2blclw\",\n                          \"_blank\"\n                        )\n                      }\n                    >\n                      <td>\n                        <img class=\"menuimg\" src=\"assets/govern.svg\" />\n                      </td>\n                      <td>\n                        <a class=\"menuitemtext\">Vote</a>\n                      </td>\n                    </tr>\n                    <tr\n                      onClick={() =>\n                        (window.location = \"https://polling.eosetf.io\")\n                      }\n                    >\n                      <td>\n                        <img class=\"menuimg\" src=\"assets/briefcase.svg\" />\n                      </td>\n                      <td>\n                        <a class=\"menuitemtext\">Rebalance</a>\n                      </td>\n                    </tr>\n\n                    <tr\n                      onClick={() =>\n                        window.open(\n                          \"https://defibox.io/pool-market-details/1232\",\n                          \"_blank\"\n                        )\n                      }\n                    >\n                      <td>\n                        <img class=\"menuimg\" src=\"assets/checkout.svg\" />\n                      </td>\n                      <td>\n                        <a class=\"menuitemtext\">Defibox</a>\n                      </td>\n                    </tr>\n                    <tr\n                      onClick={() =>\n                        window.open(\"https://t.me/eosetf\", \"_blank\")\n                      }\n                    >\n                      <td>\n                        <img class=\"menuimg\" src=\"assets/telegram.svg\" />\n                      </td>\n                      <td>\n                        <a class=\"menuitemtext\">Telegram</a>\n                      </td>\n                    </tr>\n                    <tr\n                      onClick={() =>\n                        window.open(\n                          \"https://github.com/n0umen0n/sceosetf\",\n                          \"_blank\"\n                        )\n                      }\n                    >\n                      <td>\n                        <img class=\"menuimg\" src=\"assets/github.svg\" />\n                      </td>\n                      <td>\n                        <a class=\"menuitemtext\">Github</a>\n                      </td>\n                    </tr>\n                    {accountname == \"\" ? (\n                      <tr onClick={() => logmein()}>\n                        <td>\n                          <img class=\"menuimg\" src=\"assets/login.svg\" />\n                        </td>\n                        <td>\n                          <a class=\"menuitemtext\">Login</a>\n                        </td>\n                      </tr>\n                    ) : (\n                        <tr onClick={() => logmeout()}>\n                          <td>\n                            <img class=\"menuimg\" src=\"assets/logout.svg\" />\n                          </td>\n                          <td>\n                            <a class=\"menuitemtext\">Logout</a>\n                          </td>\n                        </tr>\n                      )}\n                  </table>\n                </div>\n              </div>\n            </div>\n          </Drawer>\n          <div class=\"leftbar\">\n            <div class=\"logo\">\n              <img width=\"64px\" src=\"assets/logo.svg\" />\n            </div>\n            <div class=\"appname\">\n              <a>CETF</a>\n            </div>\n            <div class=\"accountname\">\n              {accountname == \"\" ? <a>Not logged in</a> : accountname}\n            </div>\n            <div class=\"menuitemswrapper\">\n              <table class=\"menuitems\">\n                <tr onClick={() => setView(\"create\")}>\n                  <td>\n                    <img\n                      class=\"menuimg\"\n                      src=\"assets/iconmonstr-bitcoin-6.svg\"\n                    />\n                  </td>\n                  <td>\n                    <a class=\"menuitemtext\">Invest</a>\n                  </td>\n                </tr>\n                <tr onClick={() => setView(\"staking\")}>\n                  <td>\n                    <img class=\"menuimg\" src=\"assets/stake.svg\" />\n                  </td>\n                  <td>\n                    <a class=\"menuitemtext\">Stake</a>\n                  </td>\n                </tr>\n                <tr onClick={() => setView(\"earn\")}>\n                  <td>\n                    <img class=\"menuimg\" src=\"assets/iconmonstr-chart-5.svg\" />\n                  </td>\n                  <td>\n                    <a class=\"menuitemtext\">Earn</a>\n                  </td>\n                </tr>\n                <tr onClick={() => setView(\"portfolio\")}>\n                  <td>\n                    <img class=\"menuimg\" src=\"assets/briefcase.svg\" />\n                  </td>\n                  <td>\n                    <a class=\"menuitemtext\">My Portfolio</a>\n                  </td>\n                </tr>\n                <tr onClick={() => setView(\"about\")}>\n                  <td>\n                    <img class=\"menuimg\" src=\"assets/iconmonstr-chart-11.svg\" />\n                  </td>\n                  <td>\n                    <a class=\"menuitemtext\">Tokens</a>\n                  </td>\n                </tr>\n                <tr onClick={() => setView(\"stats\")}>\n                  <td>\n                    <img class=\"menuimg\" src=\"assets/stats.svg\" />\n                  </td>\n                  <td>\n                    <a class=\"menuitemtext\">Tokenomics</a>\n                  </td>\n                </tr>\n\n                {accountname == \"\" ? (\n                  <tr onClick={() => showModal()}>\n                    <td>\n                      <img class=\"menuimg\" src=\"assets/login.svg\" />\n                    </td>\n                    <td>\n                      <a class=\"menuitemtext\">Login</a>\n                    </td>\n                  </tr>\n                ) : (\n                    <tr onClick={() => logmeout()}>\n                      <td>\n                        <img class=\"menuimg\" src=\"assets/logout.svg\" />\n                      </td>\n                      <td>\n                        <a class=\"menuitemtext\">Logout</a>\n                      </td>\n                    </tr>\n                  )}\n              </table>\n            </div>\n          </div>\n          {view == \"create\" ? (\n            <Scrollbars\n              class=\"mask\"\n              style={{ width: \"100%\", height: \"100%\" }}\n              autoHide\n            >\n              <div class=\"rightbar\">\n                <div class=\"rightbartopbox\">\n                  <div class=\"createetftitle\">\n                    <div>\n                      <a>Invest</a>\n                    </div>\n                    <div className={classes.root}>\n                      <Accordion className={classes.expansion}>\n                        <AccordionSummary\n                          expandIcon={<ExpandMoreIcon />}\n                          aria-controls=\"panel1a-content\"\n                          id=\"panel1a-header\"\n                          className={classes.summary}\n                        >\n                          <Typography className={classes.heading}>\n                            Click here for more information\n                          </Typography>\n                        </AccordionSummary>\n                        <AccordionDetails className={classes.expansion2}>\n                          <Typography\n                            className={classes.heading}\n                            style={{\n                              \"padding-right\": \"10px\",\n                              \"padding-bottom\": \"1px\",\n                            }}\n                          >\n                            NB! CETF is a new protocol, there might be exploits\n                            in the code that will cause loss of all your funds.\n                            <br />\n                            <br />\n                            By investing you are buying tokens on EOS mainnet\n                            and creating EOSETF. <br />\n                            <br />\n                            EOSETF is a token that represents ownership of the\n                            fund.\n                            <br />\n                            <br />\n                            Anytime, EOSETF can be redeemed to receive all the\n                            EOS tokens you bought. EOSETF can also be sold on\n                            Defibox.\n                            <br />\n                            <br />\n                            EOSETF is actively managed by fund managers, who\n                            pick tokens to be included in the fund.\n                            <br />\n                            <br />\n                            Tokens in the fund are under msig between five Eden\n                            members.\n                          </Typography>\n                        </AccordionDetails>\n                      </Accordion>\n                    </div>\n                  </div>\n                  {/**<div class=\"slidertext\">\n                    <a>Creating <input style={{ \"color\": tokens > 200 ? \"red\" : \"inherit\" }} class=\"tokeninput\" type=\"number\" value={tokens} onChange={e => setTokens(e.target.value)}></input> EOSETF, consisting of tokens valued at <input class=\"eosvalue\" type=\"number\" value={parseFloat(tokens * etfprice).toFixed(2)}></input> EOS </a>\n                  </div>\n                  <div class=\"slider\">\n                    <CustomSlider\n                      defaultValue={0.0000}\n                      value={tokens}\n                      aria-label=\"custom thumb label\"\n                      step={1.0000}\n                      min={0}\n                      max={200.0000}\n                      onChangeCommitted={(e, val) => setTokens(val)}\n                      style={{\n                        marginBottom: \"10px\",\n                        \"margin-top\": \"10px\",\n                        color: \"white\",\n                      }}\n                    />\n                  </div>**/}\n                </div>\n\n                <div class=\"colorcreatecard\">\n                  <div class=\"promotext\">\n                    <b>100 EOS</b> invested {periodbutton} ago, now{\" \"}\n                    <b>\n                      {historicalprices ? (\n                        historicalprices[periodbutton]\n                      ) : (\n                          <CircularProgress\n                            style={{ color: \"#5A83F1\" }}\n                            size=\"14.4px\"\n                          />\n                        )}{\" \"}\n                      EOS\n                    </b>\n                  </div>\n                  <div class=\"periodbuttons\">\n                    <div\n                      class=\"periodbutton\"\n                      onClick={() => setPeriodbutton(\"a month\")}\n                      style={{\n                        fontWeight: periodbutton == \"a month\" ? 600 : 400,\n                      }}\n                    >\n                      1 Month\n                    </div>\n                    <div\n                      class=\"periodbutton\"\n                      onClick={() => setPeriodbutton(\"six months\")}\n                      style={{\n                        fontWeight: periodbutton == \"six months\" ? 600 : 400,\n                      }}\n                    >\n                      6 Months\n                    </div>\n                    <div\n                      class=\"periodbutton\"\n                      onClick={() => setPeriodbutton(\"a year\")}\n                      style={{\n                        fontWeight: periodbutton == \"a year\" ? 600 : 400,\n                      }}\n                    >\n                      Year\n                    </div>\n                  </div>\n                </div>\n                <div class=\"tabwrapper\">\n                  <div class=\"tabbuttons\">\n                    <Button\n                      sx={{ borderRadius: \"0\" }}\n                      style={{\n                        color: \"#534C80\",\n                        \"border-bottom\":\n                          tabbutton == \"invest\"\n                            ? \"0.2rem solid #7FAAF5\"\n                            : \"none\",\n                        lineHeight: \"1.2rem\",\n                      }}\n                      onClick={() => setTabbutton(\"invest\")}\n                    >\n                      Invest\n                    </Button>\n                    <Button\n                      sx={{ borderRadius: \"0\" }}\n                      style={{\n                        color: \"#534C80\",\n                        \"border-bottom\":\n                          tabbutton == \"sell\" ? \"0.2rem solid #7FAAF5\" : \"none\",\n                        lineHeight: \"1.2rem\",\n                      }}\n                      onClick={() => setTabbutton(\"sell\")}\n                    >\n                      Sell\n                    </Button>\n                  </div>\n                  {tabbutton == \"invest\" ? (\n                    <div class=\"invest\">\n                      <div\n                        style={{\n                          marginBottom: \"4px\",\n                        }}\n                        class=\"depositlabel\"\n                      >\n                        Choose investment amount{\" \"}\n                      </div>\n\n                      <CssTextField\n                        id=\"outlined\"\n                        value={tokens}\n                        onChange={(e) => {\n                          let input = e.target.value;\n                          if (\n                            !input ||\n                            (input[input.length - 1].match(\"[0-9]\") &&\n                              input[0].match(\"[1-9]\") &&\n                              input.length < 6)\n                          )\n                            setTokens(input);\n                        }}\n                        sx={{\n                          backgroundColor: \"white\",\n                          opacity: 0.7,\n                          borderRadius: \"10px\",\n                          width: \"100%\",\n                          input: { color: \"#5A83F1\", fontWeight: \"600\" },\n                        }}\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              {portfoliodata?.eosetfpriceineos ? (\n                                parseFloat(\n                                  tokens *\n                                  portfoliodata?.eosetfpriceineos *\n                                  portfoliodata?.eospriceinusd\n                                )?.toFixed(2) +\n                                \" USD/\" +\n                                parseFloat(\n                                  tokens * portfoliodata?.eosetfpriceineos\n                                )?.toFixed(2) +\n                                \" EOS\"\n                              ) : (\n                                  <CircularProgress\n                                    style={{ color: \"#5A83F1\" }}\n                                    size=\"16px\"\n                                  />\n                                )}\n                            </InputAdornment>\n                          ),\n                          startAdornment: (\n                            <InputAdornment position=\"start\">\n                              EOSETF\n                            </InputAdornment>\n                          ),\n                        }}\n                      />\n                      <div\n                        style={{\n                          marginTop: \"4px\",\n                        }}\n                        class=\"depositlabel\"\n                      >\n                        Balance:{\" \"}\n                        <b>\n                          {\" \"}\n                          {portfoliodata?.eosbalance ? (\n                            Number(\n                              portfoliodata?.eosbalance?.balance.split(\" \")[0]\n                            ).toFixed(0) + \" EOS\"\n                          ) : (\n                              <CircularProgress\n                                style={{ color: \"#5A83F1\" }}\n                                size=\"13px\"\n                              />\n                            )}\n                        </b>\n                      </div>\n                      <button\n                        onClick={() => dynamicsend(false)}\n                        class=\"depositbutton\"\n                        style={{ marginTop: \"20px\" }}\n                      >\n                        Invest\n                      </button>\n                      <label style={{ fontSize: \"13px\" }}>Advanced</label>\n                      <Switch\n                        checked={checked1}\n                        onChange={handleSwitchChange1}\n                      />\n                      {checked1 ? (\n                        <>\n                          <div style={{ fontSize: \"13px\" }}>\n                            Uses your existing tokens to invest\n                          </div>\n                          <button\n                            onClick={() => dynamicsend(true)}\n                            class=\"depositbutton\"\n                          >\n                            Buy missing and invest\n                          </button>\n                        </>\n                      ) : (\n                          <></>\n                        )}\n                    </div>\n                  ) : (\n                      <div class=\"invest\">\n                        <div\n                          style={{\n                            marginBottom: \"4px\",\n                          }}\n                          class=\"depositlabel\"\n                        >\n                          Choose amount to sell\n                      </div>\n                        <CssTextField\n                          id=\"outlined\"\n                          defaultValue=\"100\"\n                          onChange={(e) => setSelltokenamount(e.target.value)}\n                          value={selltokenamount}\n                          sx={{\n                            backgroundColor: \"white\",\n                            opacity: 0.7,\n                            borderRadius: \"10px\",\n                            width: \"100%\",\n                            input: { color: \"#5A83F1\", fontWeight: \"600\" },\n                          }}\n                          InputProps={{\n                            endAdornment: (\n                              <InputAdornment position=\"end\">\n                                {parseFloat(\n                                  selltokenamount *\n                                  portfoliodata?.eosetfpriceinusd\n                                )?.toFixed(2)}\n                                {\" USD\"}\n                              </InputAdornment>\n                            ),\n                            startAdornment: (\n                              <InputAdornment position=\"start\">\n                                EOSETF\n                              </InputAdornment>\n                            ),\n                          }}\n                        />\n                        <div\n                          style={{\n                            marginTop: \"4px\",\n                          }}\n                          class=\"depositlabel\"\n                        >\n                          Balance:{\" \"}\n                          <b>\n                            {\" \"}\n                            {accountname\n                              ? Number(\n                                portfoliodata?.eosetfbalance?.balance?.split(\n                                  \" \"\n                                )[0]\n                              ).toFixed(4) + \" EOSETF\"\n                              : \"0 EOSETF\"}\n                          </b>\n                        </div>\n                        <button\n                          onClick={() => selltokens()}\n                          class=\"depositbutton\"\n                          style={{ marginTop: \"20px\" }}\n                        >\n                          Sell\n                      </button>\n                        <label style={{ fontSize: \"13px\" }}>Advanced</label>\n                        <Switch checked={checked} onChange={handleSwitchChange} />\n                        {checked ? (\n                          <>\n                            <div style={{ fontSize: \"13px\" }}>\n                              Redeem returns the underlying tokens.\n                          </div>\n                            <button\n                              onClick={() => sendetf()}\n                              class=\"depositbutton\"\n                            >\n                              Redeem\n                          </button>\n                          </>\n                        ) : (\n                            <></>\n                          )}\n                      </div>\n                    )}\n                </div>\n                {/**\n              <Scrollbars class=\"mask\" style={{ width: \"100%\", height: \"90%\" }} autoHide >\n                <div class=\"rightbar\">\n                  {fulldata ? \n                  fulldata.map(row => {\n                    if(Number(row.tokeninfund)!==0){\n                    return(\n                    <div class=\"smallcard\" style={{ \"border\": (parseFloat(row.minamount.split(\" \")[0]) * tokens).toFixed(String(row.decimals).length-1) > getbalance(row) ? \"solid 2px red\" : \"none\" }}>\n                      <div class=\"tokenlogo\">\n                        <img class=\"tokenlogoimage\" height=\"100%\" src={row.image} />\n                      </div>\n                      <div class=\"smallcardtext\">\n                        <a>{(parseFloat(row.minamount.split(\" \")[0]) * tokens).toFixed(String(row.decimals).length-1)} {row.minamount.split(\" \")[1]} tokens</a>\n                      </div>\n                      <div class=\"trxbutton\">\n                      {(parseFloat(row.minamount.split(\" \")[0]) * tokens).toFixed(String(row.decimals).length-1) < getbalance(row) ?\n                        <img class=\"trximage\" height=\"100%\" src=\"assets/tick.svg\" />\n                        :\n                        <img class=\"trximage\" onClick={() => window.open(`https://defibox.io/pool-market-details/${row.pairid}`, \"_blank\")} height=\"100%\" src=\"assets/connection.svg\" />\n                      }\n                    </div>\n                    </div>\n                    )}\n                  })\n                  :\n                  <></>\n                  }\n                  <div style={{ \"display\": \"block\", \"opacity\": \"0\" }}>.<br />.<br />.</div>\n                </div>\n              </Scrollbars>\n              <div class=\"fade\" />\n              <div class=\"createbuttonwrapper\">\n                <button onClick={() => dynamicsend(true)} class=\"createbutton\">Buy missing and Create</button>\n                <button onClick={() => dynamicsend(false)} class=\"createbutton\">Buy all and Create</button>\n              </div>\n              **/}\n                <div style={{ display: \"block\", opacity: \"0\" }}>\n                  .<br />.<br />.\n                </div>\n              </div>\n            </Scrollbars>\n          ) : view == \"redeem\" ? (\n            <div class=\"rightbar\">\n              <div class=\"rightbartopbox\">\n                <div class=\"createetftitle\">\n                  <div>\n                    <a>Redeem tokens</a>\n                  </div>\n                </div>\n                <div className={classes.root}>\n                  <Accordion className={classes.expansion}>\n                    <AccordionSummary\n                      expandIcon={<ExpandMoreIcon />}\n                      aria-controls=\"panel1a-content\"\n                      id=\"panel1a-header\"\n                      className={classes.summary}\n                    >\n                      <Typography className={classes.heading}>\n                        Click here for more information\n                      </Typography>\n                    </AccordionSummary>\n                    <AccordionDetails className={classes.expansion2}>\n                      <Typography\n                        className={classes.heading}\n                        style={{\n                          \"padding-right\": \"10px\",\n                          \"padding-bottom\": \"46px\",\n                        }}\n                      >\n                        To redeem 13 tokens, EOSETF must be sent to cet.f\n                        account. <br />\n                        <br />\n                        Sent EOSETF tokens get burned.\n                        <br />\n                        <br />\n                        Redemption fee is set to 5%.\n                      </Typography>\n                    </AccordionDetails>\n                  </Accordion>\n                </div>\n                <div class=\"slidertext\">\n                  <a>\n                    You are redeeming{\" \"}\n                    <input\n                      class=\"tokeninput\"\n                      type=\"number\"\n                      value={redeemtokens}\n                      onChange={(e) => setRedeemtokens(e.target.value)}\n                    ></input>{\" \"}\n                    EOSETF\n                  </a>\n                </div>\n                <div class=\"slider\">\n                  <CustomSlider\n                    defaultValue={0.0}\n                    aria-label=\"custom thumb label\"\n                    step={1.0}\n                    value={redeemtokens}\n                    min={0}\n                    max={200.0}\n                    onChangeCommitted={(e, val) => setRedeemtokens(val)}\n                    style={{\n                      marginBottom: \"10px\",\n                      \"margin-top\": \"10px\",\n                      color: \"white\",\n                    }}\n                  />\n                </div>\n              </div>\n              <Scrollbars\n                class=\"mask\"\n                style={{ width: \"100%\", height: \"90%\" }}\n                autoHide\n              >\n                <div class=\"rightbar\">\n                  {fulldata ? (\n                    fulldata.map((row) => {\n                      if (Number(row.tokeninfund) !== 0) {\n                        return (\n                          <div class=\"smallcard\">\n                            <div class=\"tokenlogo\">\n                              <img\n                                class=\"tokenlogoimage\"\n                                height=\"100%\"\n                                src={row.image}\n                              />\n                            </div>\n                            <div class=\"smallcardtext\">\n                              <a>\n                                {(\n                                  redeemtokens *\n                                  row.minamount.split(\" \")[0] *\n                                  redemptionfee\n                                ).toFixed(String(row.decimals).length - 1)}{\" \"}\n                                {row.minamount.split(\" \")[1]} tokens returned\n                              </a>\n                            </div>\n                            <div class=\"trxbutton\">\n                              <img\n                                class=\"trximage\"\n                                height=\"100%\"\n                                src=\"assets/tick.svg\"\n                              />\n                            </div>\n                          </div>\n                        );\n                      }\n                    })\n                  ) : (\n                      <></>\n                    )}\n\n                  <div style={{ display: \"block\", opacity: \"0\" }}>\n                    .<br />.<br />.\n                  </div>\n                </div>\n              </Scrollbars>\n              <div class=\"createbuttonwrapper\">\n                <button class=\"createbutton\" onClick={() => sendetf()}>\n                  Redeem tokens\n                </button>\n              </div>\n            </div>\n          ) : view == \"stats\" ? (\n            <div class=\"rightbar\">\n              <div class=\"rightbartopbox\">\n                <div class=\"createetftitle\">\n                  <div>\n                    <a>\n                      Tokenomics\n                      <CachedIcon\n                        style={{\n                          \"margin-left\": \"5px\",\n                          width: \"24px\",\n                          height: \"auto\",\n                          \"vertical-align\": \"middle\",\n                        }}\n                        onClick={() => refresher()}\n                      />\n                    </a>\n                  </div>\n                </div>\n                <div className={classes.root}>\n                  <Accordion className={classes.expansion}>\n                    <AccordionSummary\n                      expandIcon={<ExpandMoreIcon />}\n                      aria-controls=\"panel1a-content\"\n                      id=\"panel1a-header\"\n                      className={classes.summary}\n                    >\n                      <Typography className={classes.heading}>\n                        Click here for more information\n                      </Typography>\n                    </AccordionSummary>\n                    <AccordionDetails className={classes.expansion2}>\n                      <Typography\n                        className={classes.heading}\n                        style={{\n                          \"padding-right\": \"10px\",\n                          \"padding-bottom\": \"12px\",\n                        }}\n                      >\n                        CETF tokens will be distributed to EOSETF/EOS (Defibox)\n                        liquidity providers and EOSETF fund managers for one\n                        year.\n                        <br />\n                        <br /> Halving occurs once each month. Halving divides\n                        the CETF rewards that liquidity providers receive by 2.{\" \"}\n                        <br />\n                      </Typography>\n                    </AccordionDetails>\n                  </Accordion>\n                </div>\n              </div>\n\n              <Scrollbars class=\"mask\" style={{ width: \"80%\" }} autoHide>\n                <div class=\"statcards\">\n                  <div class=\"statcard\">\n                    <a class=\"stat\">\n                      {gettokensupply(eosetfbalance).toLocaleString()} EOSETF\n                    </a>\n                    <a class=\"statexplainer\">Circulating supply</a>\n                  </div>\n\n                  <div class=\"statcard\">\n                    <a class=\"stat\">\n                      {gettokensupply(etfbalance).toLocaleString()} CETF\n                    </a>\n                    <a class=\"statexplainer\">Circulating supply (Max 80m)</a>\n                  </div>\n\n                  <div class=\"statcard\">\n                    <a class=\"stat\">\n                      {parseFloat(geteosetfprice().toFixed(2))} EOS\n                    </a>\n                    <a class=\"statexplainer\">EOSETF price</a>\n                  </div>\n                  <div class=\"statcard\">\n                    <a class=\"stat\">{etfprice.toFixed(2)} EOS </a>\n                    <a class=\"statexplainer\">\n                      Price of tokens bought separately\n                    </a>\n                  </div>\n                  <div class=\"statcard\">\n                    <a class=\"stat\">{12}</a>\n                    <a class=\"statexplainer\">In total halvings</a>\n                  </div>\n                </div>\n                <div style={{ display: \"block\", opacity: \"0\" }}>\n                  .<br />.<br />.\n                </div>\n              </Scrollbars>\n              <div class=\"fade\" />\n            </div>\n          ) : view == \"poll\" ? (\n            <Poll fulldata={fulldata} />\n          ) : view == \"about\" ? (\n            <div class=\"rightbar\">\n              <div class=\"rightbartopbox\">\n                <div class=\"createetftitle\">EOSETF token allocation</div>\n                <div class=\"slidertext\">\n                  <a>Chart shows % (in USD) of each token in the fund</a>\n                </div>\n              </div>\n              <div class=\"chartwrapper\">\n                <Doughnut\n                  options={{\n                    maintainAspectRatio: false,\n                    maxWidth: 300,\n                    height: \"auto\",\n                  }}\n                  responsive=\"true\"\n                  data={data1}\n                  legend={{\n                    position: \"bottom\",\n                    labels: {\n                      filter: (legendItem, data) =>\n                        data.datasets[0].data[legendItem.index] != 0,\n                    },\n                  }}\n                />\n              </div>\n            </div>\n          ) : view == \"staking\" ? (\n            <Scrollbars\n              class=\"mask\"\n              style={{ width: \"100%\", height: \"100%\", display: \"flex\" }}\n              autoHide\n            >\n              <div class=\"rightbar\">\n                <div class=\"rightbartopbox\">\n                  <div class=\"createetftitle\">Staking</div>\n                  <div className={classes.root}>\n                    <Accordion className={classes.expansion}>\n                      <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                        className={classes.summary}\n                      >\n                        <Typography className={classes.heading}>\n                          Click here for more information\n                        </Typography>\n                      </AccordionSummary>\n                      <AccordionDetails className={classes.expansion2}>\n                        <Typography\n                          className={classes.heading}\n                          style={{\n                            \"padding-right\": \"10px\",\n                            \"padding-bottom\": \"1px\",\n                          }}\n                        >\n                          Staking CETF enables you to claim fees that the EOSETF\n                          generates. <br />\n                          <br />\n                          Fees can be claimed once per week in My portfolio\n                          view.\n                          <br />\n                          <br />\n                          Fees are distributed between all the stakers\n                          proportionally to the amount they have staked.\n                          <br />\n                          <br />\n                          Fees can be claimed week after staking CETF.\n                        </Typography>\n                      </AccordionDetails>\n                    </Accordion>\n                  </div>\n                  <div class=\"staketopcardwrapper\">\n                    <div class=\"staketopcard\">\n                      <div class=\"stakestat\">{Math.floor(stake) + \" CETF\"}</div>\n                      <div class=\"stakedescriptor\">You are staking</div>\n                    </div>\n                  </div>\n                  <div class=\"slider\">\n                    <CustomSlider\n                      defaultValue={Math.floor(stakemax)}\n                      value={stake}\n                      aria-label=\"custom thumb label\"\n                      step={1.0}\n                      min={0}\n                      max={Math.floor(stakemax)}\n                      onChangeCommitted={(e, val) => setStake(val)}\n                      style={{\n                        marginBottom: \"10px\",\n                        \"margin-top\": \"10px\",\n                        color: \"white\",\n                      }}\n                    />\n                  </div>{\" \"}\n                  <div class=\"createbuttonwrapper\" style={{ width: \"100%\" }}>\n                    <button class=\"depositbutton\" onClick={() => stakeetf()}>\n                      Stake\n                    </button>\n                  </div>\n                </div>\n\n                {staketable?.rows.map((row, index) => {\n                  return (\n                    <div class=\"stakecard\">\n                      <div style={{ width: \"60%\", marginLeft: \"10px\" }}>\n                        Staked: {row.staked}\n                      </div>{\" \"}\n                      <div\n                        class=\"unstakebuttonwrapper\"\n                        style={{ width: \"40%\", marginRight: \"10px\" }}\n                      >\n                        <button\n                          class=\"unstakebutton\"\n                          onClick={() => unstake(index)}\n                        >\n                          Unstake\n                        </button>\n                      </div>\n                    </div>\n                  );\n                })}\n                <div style={{ display: \"block\", opacity: \"0\" }}>\n                  .<br />.<br />.\n                </div>\n              </div>\n            </Scrollbars>\n          ) : view == \"earn\" ? (\n            <Scrollbars\n              class=\"mask2\"\n              style={{ width: \"100%\", height: \"100%\" }}\n              autoHide\n            >\n              <div class=\"rightbar\">\n                <div class=\"rightbartopbox\">\n                  <div class=\"createetftitle\">Earn CETF</div>\n                  <div className={classes.root}>\n                    <Accordion className={classes.expansion}>\n                      <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                        className={classes.summary}\n                      >\n                        <Typography className={classes.heading}>\n                          Click here for more information\n                        </Typography>\n                      </AccordionSummary>\n                      <AccordionDetails className={classes.expansion2}>\n                        <Typography\n                          className={classes.heading}\n                          style={{\n                            \"padding-right\": \"10px\",\n                            \"padding-bottom\": \"1px\",\n                          }}\n                        >\n                          You can earn CETF tokens by depositing EOS and EOSETF\n                          to Defibox.\n                          <br />\n                          <br />\n                          EOSETF and EOS can be withdrawn from Defibox anytime.\n                          <br />\n                          <br />\n                          We don't recommend depositing more than 50% of your\n                          EOSETF and EOS holdings. You will always receive back\n                          USD worth of tokens you deposited but you might lose\n                          out on gains due to impermanent loss.\n                          <br />\n                          <br />\n                          CETF tokens can be staked to earn fees that the EOSETF\n                          generates.\n                          <br />\n                          <br />\n                          CETF tokens can be claimed once a week. First claim\n                          can be executed one week after staking.\n                        </Typography>\n                      </AccordionDetails>\n                    </Accordion>\n                  </div>\n                  <div\n                    style={{\n                      marginBottom: \"4px\",\n                    }}\n                    class=\"depositlabel\"\n                  >\n                    Choose amount to deposit\n                  </div>\n                  <CssTextField\n                    id=\"outlined\"\n                    value={depositamounteosetf}\n                    onChange={(e) => deposit(e.target.value, \"EOSETF\")}\n                    sx={{\n                      backgroundColor: \"white\",\n                      opacity: 0.7,\n                      borderRadius: \"10px\",\n                      width: \"100%\",\n                      input: { color: \"#5A83F1\", fontWeight: \"600\" },\n                    }}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          {parseFloat(\n                            depositamounteosetf *\n                            portfoliodata?.eosetfpriceinusd\n                          )?.toFixed(2)}{\" \"}\n                          USD\n                        </InputAdornment>\n                      ),\n                      startAdornment: (\n                        <InputAdornment position=\"start\">EOSETF</InputAdornment>\n                      ),\n                    }}\n                  />\n                  <CssTextField\n                    id=\"outlined\"\n                    value={depositamounteos}\n                    onChange={(e) => deposit(e.target.value, \"EOS\")}\n                    sx={{\n                      backgroundColor: \"white\",\n                      opacity: 0.7,\n                      borderRadius: \"10px\",\n                      width: \"100%\",\n                      marginTop: \"5px\",\n                      input: { color: \"#5A83F1\", fontWeight: \"600\" },\n                    }}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          {parseFloat(\n                            depositamounteos * portfoliodata?.eospriceinusd\n                          )?.toFixed(2)}{\" \"}\n                          USD\n                        </InputAdornment>\n                      ),\n                      startAdornment: (\n                        <InputAdornment position=\"start\">EOS</InputAdornment>\n                      ),\n                    }}\n                  />\n                  <button class=\"depositbutton\" onClick={() => senddeposit()}>\n                    Deposit\n                  </button>\n\n                  <div\n                    style={{\n                      marginBottom: \"-12px\",\n                    }}\n                    class=\"depositlabel\"\n                  >\n                    Choose amount to withdraw\n                  </div>\n                  {portfoliodata?.alldeposits?.map((value, index) => {\n                    return (\n                      <div class=\"withdrawcard\">\n                        <div class=\"withdrawvalue\">{value.staked}</div>\n                        <br />\n                        <div class=\"withdrawsecondrow\">\n                          <div class=\"withdrawsliderwrapper\">\n                            <Slider\n                              defaultValue={25}\n                              step={25}\n                              onChangeCommitted={(e, val) =>\n                                withdrawhandler(index, val)\n                              }\n                              valueLabelDisplay=\"auto\"\n                              marks\n                              min={0}\n                              max={100}\n                              valueLabelFormat={(value) => <div>{value}%</div>}\n                              className={classes.slider2}\n                            />\n                          </div>\n                          <div class=\"withdrawbuttonwrapper\">\n                            <button\n                              class=\"withdrawbutton\"\n                              onClick={() => withdraw(index)}\n                            >\n                              Withdraw\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                <div\n                  style={{ display: \"block\", opacity: \"0\", marginTop: \"50px\" }}\n                >\n                  .<br />.<br />.\n                </div>\n              </div>\n            </Scrollbars>\n          ) : view == \"portfolio\" ? (\n            <div class=\"rightbar\">\n              <div class=\"rightbartopbox\">\n                <div class=\"createetftitle\">My portfolio</div>\n                <div className={classes.root}>\n                  <Accordion className={classes.expansion}>\n                    <AccordionSummary\n                      expandIcon={<ExpandMoreIcon />}\n                      aria-controls=\"panel1a-content\"\n                      id=\"panel1a-header\"\n                      className={classes.summary}\n                    >\n                      <Typography className={classes.heading}>\n                        Click here for more information\n                      </Typography>\n                    </AccordionSummary>\n                    <AccordionDetails className={classes.expansion2}>\n                      <Typography\n                        className={classes.heading}\n                        style={{\n                          \"padding-right\": \"10px\",\n                          \"padding-bottom\": \"1px\",\n                        }}\n                      >\n                        EOS and EOSETF balance does not include tokens deposited\n                        to Defibox.\n                      </Typography>\n                    </AccordionDetails>\n                  </Accordion>\n                </div>\n                <div class=\"portfoliotopcardwrapper\">\n                  <div class=\"portfoliotopcard\">\n                    <div class=\"portfoliostat\">\n                      {accountname\n                        ? Number(\n                          portfoliodata?.eosetfbalance?.balance?.split(\" \")[0]\n                        ).toFixed(4) + \" EOSETF\"\n                        : \"0 EOSETF\"}\n                    </div>\n                    <div class=\"portfoliodescriptor\">\n                      ~{portfoliodata?.eosetfinusd?.toFixed(0)} USD\n                    </div>\n                  </div>\n                  <div class=\"portfoliotopcard\">\n                    <div class=\"portfoliostat\">\n                      {accountname\n                        ? Number(\n                          portfoliodata?.eosbalance?.balance.split(\" \")[0]\n                        ).toFixed(0) + \" EOS\"\n                        : \"0 EOS\"}\n                    </div>\n                    <div class=\"portfoliodescriptor\">\n                      ~{portfoliodata?.eosinusd?.toFixed(0)} USD\n                    </div>\n                  </div>\n                  <div class=\"portfoliotopcard\">\n                    <div class=\"portfoliostat\">\n                      {accountname\n                        ? Number(\n                          portfoliodata?.cetfbalance?.balance.split(\" \")[0]\n                        ).toFixed(0) + \" CETF\"\n                        : \"0 CETF\"}\n                    </div>\n                    <div class=\"portfoliodescriptor\">~{0} USD</div>\n                  </div>\n                </div>\n                <div class=\"portfoliobottomwrapper\">\n                  <div style={{ width: \"30%\", height: \"200px\" }}>\n                    <div class=\"claimcard\">\n                      <CircularProgressbar\n                        value={timetilnext}\n                        text={displaytime}\n                        styles={buildStyles({\n                          pathColor: `#7FAAF5`,\n                          textColor: \"#7FAAF5\",\n                          trailColor: \"#DEE9FC\",\n                          backgroundColor: \"#7FAAF5\",\n                        })}\n                      />\n                      <div style={{ marginTop: \"10px\" }}>\n                        <div class=\"countercomment\">\n                          Until next claiming period\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"claimcard\">\n                    <>\n                      <div class=\"claimtexts\" style={{ fontWeight: \"500\" }}>\n                        Available to claim\n                      </div>\n                      {dividendflag ? (\n                        <div class=\"claimtexts\">EOSETF claimed!</div>\n                      ) : (\n                          <div class=\"claimtexts\">\n                            {dividendclaim.toFixed(4)} EOSETF\n                          </div>\n                        )}\n                      {dividendflagcetf ? (\n                        <div class=\"claimtexts\">CETF claimed!</div>\n                      ) : (\n                          <div class=\"claimtexts\">{myshare.toFixed(4)} CETF</div>\n                        )}\n                      <button class=\"claimbutton\" onClick={() => getdiv()}>\n                        Claim\n                      </button>\n                    </>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n                            <a>Error</a>\n                          )}\n        </div>\n        <div class=\"floating-menu\">\n          <div\n            onClick={() => setView(\"create\")}\n            style={{ fontWeight: view == \"create\" ? 600 : 400 }}\n          >\n            Invest\n          </div>\n          <div\n            onClick={() => setView(\"earn\")}\n            style={{ fontWeight: view == \"earn\" ? 600 : 400 }}\n          >\n            Earn\n          </div>\n          <div\n            onClick={() => setView(\"staking\")}\n            style={{ fontWeight: view == \"staking\" ? 600 : 400 }}\n          >\n            Stake\n          </div>\n          <div\n            onClick={() => setView(\"portfolio\")}\n            style={{ fontWeight: view == \"portfolio\" ? 600 : 400 }}\n          >\n            My Portfolio\n          </div>\n          <img\n            src=\"assets/burger.svg\"\n            class=\"menubutton\"\n            onClick={toggleDrawer(true)}\n          />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default withUAL(App);\n","/Users/vlad/Desktop/lennyetf/eosetfv2/src/BarChart.js",["175","176","177","178","179","180","181","182","183"],"import './App.css';\nimport './Poll.css';\nimport { Slider } from '@material-ui/core';\nimport React, { useState, useEffect } from \"react\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { ResponsiveBar } from '@nivo/bar'\n\nconst BarChart = React.memo(props => {\n  const colors = { 'Current': 'rgb(0, 183, 255)', 'Reallocated': 'rgb(240, 107, 255)'}\n  const getColor = bar => colors[bar.id]\n  const data = props.data\n    const MyResponsiveBar = ({ data /* see data tab */ }) => (\n        <ResponsiveBar\n            data={data}\n            keys={[ 'Current', 'Reallocated']}\n            indexBy=\"token\"\n            margin={{ top: 20, right: 130, bottom: 50, left: 70 }}\n            padding={0.3}\n            valueScale={{ type: 'linear' }}\n            indexScale={{ type: 'band', round: true }}\n            colors={getColor}\n            borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n            axisTop={null}\n            groupMode='grouped'\n            layout=\"horizontal\"\n            axisRight={null}\n            axisBottom={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'Percentage of portfolio',\n                legendPosition: 'middle',\n                legendOffset: 32\n            }}\n            axisLeft={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legendPosition: 'middle',\n                legendOffset: -40\n            }}\n            labelSkipWidth={12}\n            labelSkipHeight={12}\n            labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n            legends={[\n                {\n                    dataFrom: 'keys',\n                    anchor: 'bottom-right',\n                    direction: 'column',\n                    justify: false,\n                    translateX: 120,\n                    translateY: 0,\n                    itemsSpacing: 2,\n                    itemWidth: 100,\n                    itemHeight: 20,\n                    itemDirection: 'left-to-right',\n                    itemOpacity: 0.85,\n                    symbolSize: 20,\n                    effects: [\n                        {\n                            on: 'hover',\n                            style: {\n                                itemOpacity: 1\n                            }\n                        }\n                    ]\n                }\n            ]}\n            animate={true}\n            motionStiffness={90}\n            motionDamping={15}\n        />\n    )\n    return(\n            <MyResponsiveBar data = {data}/>\n    )\n}\n)\n\nexport default BarChart;","/Users/vlad/Desktop/lennyetf/eosetfv2/src/reportWebVitals.js",[],"/Users/vlad/Desktop/lennyetf/eosetfv2/src/Poll.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],"import './App.css';\nimport './Poll.css';\nimport { Slider } from '@material-ui/core';\nimport React, { useState, useEffect } from \"react\";\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport BarChart from './BarChart'\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { withUAL } from \"ual-reactjs-renderer\";\nimport Swal from \"sweetalert2\";\nimport Select from 'react-select'\nimport makeAnimated from 'react-select/animated';\n\nconst animatedComponents = makeAnimated();\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: \"14px\",\n    width: '100%',\n  },\n  progress: {\n    width: '100%',\n    fontSize: '10px'\n  },\n  heading: {\n    fontSize: \"14px\",\n    color: \"#534C80\",\n    fontFamily: \"'Roboto', sans-serif\",\n    margin: 0\n  },\n  summary: {\n    padding: 0,\n  },\n  expansion: {\n    backgroundColor: \"rgba( 255, 255, 255, 0 )\",\n    boxShadow: \"none\",\n    borderRadius: \"100px\",\n    marginLeft: 0,\n  },\n  expansion2: {\n    fontSize: \"10px\"\n  }\n}));\n\nconst CustomSlider = withStyles({\n  root: {\n    color: 'rgb(182, 188, 226)',\n    height: 8,\n  },\n  thumb: {\n    height: 12,\n    width: 12,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -4,\n    marginLeft: -4,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit',\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)',\n  },\n  track: {\n    height: 4,\n    borderRadius: 4,\n  },\n  rail: {\n    height: 4,\n    borderRadius: 4,\n  },\n})(Slider);\n\nfunction Poll(props) {\n  const classes = useStyles();\n  const [data, setData] = useState();\n  const [polldata, setpollData] = useState([]);\n  const [prices, setPrices] = useState();\n  const [percentages, setPercentages] = useState([]);\n  const [percentagesum, setPercentagesum] = useState();\n  const [allocationstate, setAllocationstate] = useState();\n  const [counter, setCounter] = useState();\n  const [chartdatastate, setChartdatastate] = useState();\n  const [options, setOptions] = useState([]);\n\n\n  const {\n    ual: { showModal, hideModal, activeUser, login, logout },\n  } = props;\n\n  if (activeUser) {\n    const accountName = activeUser.getAccountName();\n    accountName.then(function (result) {\n      setAccountName(result);\n    });\n  }\n  const displayaccountname = () => {\n    if (accountname) {\n      return accountname;\n    }\n  };\n\n  const [accountname, setAccountName] = useState(\"\")\n\n\n  const actionpuccis = (err) => {\n    const Toast = Swal.mixin({\n      toast: true,\n      position: \"bottom-end\",\n      showConfirmButton: false,\n      timer: 5000,\n      timerProgressBar: true,\n      didOpen: (toast) => {\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n      },\n    });\n    Toast.fire({\n      icon: \"error\",\n      title: err,\n    });\n  };\n\n\n  const sucessredemption = () => {\n    const Toast = Swal.mixin({\n      toast: true,\n      position: \"bottom-end\",\n      showConfirmButton: false,\n      timer: 6000,\n      timerProgressBar: true,\n      onOpen: (toast) => {\n        toast.addEventListener(\"mouseenter\", Swal.stopTimer);\n        toast.addEventListener(\"mouseleave\", Swal.resumeTimer);\n      },\n    });\n    Toast.fire({\n      icon: \"success\",\n      title: \"Sucessfully voted!\",\n    });\n  };\n\n  function LinearProgressWithLabel(props) {\n    return (\n      <Box display=\"flex\" alignItems=\"center\">\n        <Box width=\"100%\" mr={1}>\n          <LinearProgress variant=\"determinate\" {...props} />\n        </Box>\n        <Box minWidth={35}>\n          <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\n            props.value,\n          )}%`}</Typography>\n        </Box>\n      </Box>\n    );\n  }\n\n  useEffect(() => {\n    fetch(\"https://api.main.alohaeos.com:443/v1/chain/get_table_rows\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"cet.f\",\n        table: \"etfinfo\",\n        scope: \"cet.f\",\n        limit: 100,\n      }),\n    }).then((response) =>\n      response.json().then((data) => setData(data.rows))\n    );\n  }, []);\n\n  useEffect(() => {\n    fetch(\"https://api.main.alohaeos.com:443/v1/chain/get_table_rows\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        json: true,\n        code: \"consortiumlv\",\n        table: \"kysimused\",\n        scope: \"zlmdhu2blclw\",\n        lower_bound: 1111,\n        upper_bound: 1111,\n        limit: 1,\n      }),\n    }).then((response) =>\n      response.json().then((polldata) => setpollData(polldata.rows))\n    );\n  }, []);\n\n\n\n  useEffect(() => {\n    console.log(props.fulldata)\n    const newdexcomms = props.fulldata\n    //[{ community: \"box\", symbol: \"token.defi-box-eos\" }, { community: \"ogx\", symbol: \"core.ogx-ogx-eos\" }, { community: \"iq\", symbol: \"everipediaiq-iq-eos\" }\n    //  , { community: \"dapp\", symbol: \"dappservices-dapp-eos\" }, { community: \"vig\", symbol: \"vig111111111-vig-eos\" }, { community: \"efx\", symbol: \"effecttokens-efx-eos\" }, { community: \"chex\", symbol: \"chexchexchex-chex-eos\" }, { community: \"pizza\", symbol: \"pizzatotoken-pizza-eos\" }\n    //  , { community: \"dfs\", symbol: \"minedfstoken-dfs-eos\" }, { community: \"emt\", symbol: \"emanateoneos-emt-eos\" }, { community: \"dex\", symbol: \"token.newdex-dex-eos\" }, { community: \"tpt\", symbol: \"eosiotptoken-tpt-eos\" }, { community: \"dad\", symbol: \"dadtoken1111-dad-eos\" }]\n      newdexcomms.forEach((item) => {\n      fetch('https://api.newdex.io/v1/price?symbol=' + `${item.contract}-${item.token.split(\",\")[1]}-eos`)\n        .then(response => response.json())\n        .then(data => {\n          Object.assign(item, { price: data?.data?.price })\n          setPrices([...newdexcomms]);\n        }\n        )\n    })\n  }, []);\n\n\n\n  const sumValues = (obj) => Object.keys(obj).reduce((acc, value) => acc + Number(obj[value]), 0);\n\n  const sumpercentages = () => {\n    const sum = sumValues(percentages)\n    setPercentagesum(sum)\n  }\n\n\n  const cetfvote = async () => {\n    const {\n      ual: { login, displayError, showModal },\n    } = props;\n    // Via static contextType = UALContext, access to the activeUser object on this.context is now available\n    const {\n      ual: { activeUser },\n    } = props;\n\n\n    //var eosetf = Number(redeemtokens).toFixed(4);\n\n\n    if (activeUser) {\n      try {\n        const transaction = {\n          actions: [\n            {\n              account: \"consortiumlv\",\n              name: \"cetfvote\",\n              authorization: [\n                {\n                  actor: displayaccountname(), // use account that was logged in\n                  permission: \"active\",\n                },\n              ],\n              data: {\n                usersvote: [100, 130, 200, 300, 400, 44, 500, 200, 333, 500, 900, 1000, 300],\n                pollkey: 1111,\n                community: \"zlmdhu2blclw\",\n                voter: displayaccountname(),\n              },\n            },\n\n\n          ],\n        };\n        // The activeUser.signTransaction will propose the passed in transaction to the logged in Authenticator\n        await activeUser.signTransaction(transaction, {\n          broadcast: true,\n          expireSeconds: 300,\n        });\n\n        sucessredemption();\n        /*\n \n                ReactGA.event({\n                  category: \"Chain acion\",\n                  action: \"User redeemed tokens.\",\n                });\n        */\n        //alert(\"GREAT SUCCESS!\")\n        //window.location.reload(false);\n\n      } catch (error) {\n        console.log(error.message);\n        actionpuccis(\n          error.message\n        );\n      }\n    } else {\n      showModal();\n    }\n  };\n\n  const getmult = (token) => {\n    if (data) {\n      var result = data.filter(obj => {\n        return obj?.token?.split(\" \")[1].toLowerCase() == token?.toLowerCase()\n      })\n      var minamountdivider = Math.pow(10, result[0]?.token.match((/0/g) || []).length)\n      var multiplier = result[0]?.minamount / minamountdivider\n      return multiplier\n    }\n  }\n\n  const getallocation = (token) => {\n    const alloc = (getmult(token) * getprice(token) * 100 / getpricesum()).toFixed(4)\n    return alloc;\n  }\n\n  useEffect(() => {\n    if (data && prices) {\n      const chartdata = []\n      for (let i in data) {\n        const token = data[i].token.split(\" \")[1]\n        chartdata.push({ \"token\": token, \"Current\": allocationstate[token], \"Reallocated\": Math.floor(Math.random() * 10 + 3) })\n      }\n      setChartdatastate(chartdata)\n    }\n  }, [allocationstate])\n\n  useEffect(() => {\n    const allocations = []\n    const optionslist = []\n    for (let i in data) {\n      const token = data[i].token.split(\" \")[1]\n      const allocation = getallocation(token)\n      allocations[token] = allocation\n      if (allocation != \"NaN\") {\n        allocationchange(token, allocation)\n      }\n      if(allocation > 10){\n        optionslist[token] = allocation\n        optionslist.push({value:token, label:token})\n      }\n    }\n    setAllocationstate(allocations)\n    setOptions(optionslist)\n    setCounter(counter + 1)\n  }, [data, prices])\n\n  const getprice = (token) => {\n    if (prices) {\n      var result = prices.filter(obj => {\n        return obj?.community?.toLowerCase() == token?.toLowerCase()\n      })\n      if (result[0]) {\n        return result[0].price\n      }\n    }\n  }\n\n  const getpricesum = () => {\n    let sum = 0;\n    if (prices && data) {\n      for (let i in prices) {\n        const multiplication = Number(prices[i].price) * Number(getmult(prices[i].community))\n        sum += multiplication\n      }\n    }\n    return sum;\n  }\n\n  const allocationchange = (token, percentage) => {\n    const changedpercentages = percentages\n    changedpercentages[token] = Number(percentage)\n    setPercentages(...[changedpercentages])\n    sumpercentages()\n  }\n\n  const getpercentagesum = () => {\n    if (percentagesum) {\n      if (percentagesum <= 100 && percentagesum > 0) {\n        return <a style={{ \"color\": \"green\" }}>{`${percentagesum.toFixed(2)}%`}</a>\n      }\n      else return <a style={{ \"color\": \"red\" }}>{`${percentagesum.toFixed(2)}%`}</a>\n    }\n  }\n\n\n  const renderoptionadder = () => {\n    const handleChange = (values) => {\n      console.log(values)\n    }\n    return(\n      <div>\n      <Select options={options} components={animatedComponents} isMulti onChange={handleChange}/>\n      <button>Add tokens</button>\n      <a>{JSON.stringify(props.fulldata)}</a>\n      </div>\n    )\n  }\n\n  const rendercards = () => {\n    const cards = data?.map((d) =>\n      <div class=\"small-card\">\n        <a class=\"tokenname\">{d.token.split(\" \")[1]}</a>\n        <div class=\"input-wrapper\"><input key={counter} defaultValue={allocationstate[d.token.split(\" \")[1]]} class=\"tokenamount spinner\" onChange={event => allocationchange(d.token.split(\" \")[1], event.target.value)}></input></div>\n      </div>\n    );\n    return cards;\n  }\n\n  //ONCLICK VOTE \n\n  return (\n    <div class=\"right-bar\">\n      <div class=\"vote-titlearea\">\n        <div>\n          <a class=\"vote-title\">\n            Allocation voting\n                    </a>\n          <div class=\"totalnumber\">Your allocation total: {getpercentagesum()}</div>\n        </div>\n        <div class=\"votebutton\" onClick={() => cetfvote()}>Vote</div>\n\n      </div>\n\n      <Scrollbars class=\"mask2\" style={{ width: \"100%\", height: \"90%\" }} >\n        <div class=\"chartarea\">{chartdatastate ? <BarChart data={chartdatastate} /> : <CircularProgress />}</div>\n        <div>\n          {renderoptionadder()}\n        </div>\n        <div class=\"card-wrapper\">\n          {rendercards()}\n        </div>\n        <div style={{ \"display\": \"block\", \"opacity\": \"0\" }}>.<br />.<br />.</div>\n      </Scrollbars>\n      <div class=\"fade\" />\n    </div>\n  )\n}\n\nexport default withUAL(Poll);",{"ruleId":"207","severity":1,"message":"208","line":36,"column":7,"nodeType":"209","messageId":"210","endLine":36,"endColumn":13},{"ruleId":"207","severity":1,"message":"211","line":1,"column":8,"nodeType":"209","messageId":"210","endLine":1,"endColumn":12},{"ruleId":"207","severity":1,"message":"212","line":8,"column":8,"nodeType":"209","messageId":"210","endLine":8,"endColumn":20},{"ruleId":"207","severity":1,"message":"213","line":9,"column":8,"nodeType":"209","messageId":"210","endLine":9,"endColumn":16},{"ruleId":"207","severity":1,"message":"214","line":12,"column":8,"nodeType":"209","messageId":"210","endLine":12,"endColumn":15},{"ruleId":"207","severity":1,"message":"215","line":13,"column":10,"nodeType":"209","messageId":"210","endLine":13,"endColumn":13},{"ruleId":"207","severity":1,"message":"216","line":13,"column":15,"nodeType":"209","messageId":"210","endLine":13,"endColumn":18},{"ruleId":"207","severity":1,"message":"217","line":16,"column":8,"nodeType":"209","messageId":"210","endLine":16,"endColumn":17},{"ruleId":"207","severity":1,"message":"218","line":22,"column":10,"nodeType":"209","messageId":"210","endLine":22,"endColumn":15},{"ruleId":"207","severity":1,"message":"219","line":120,"column":9,"nodeType":"209","messageId":"210","endLine":120,"endColumn":18},{"ruleId":"207","severity":1,"message":"220","line":131,"column":12,"nodeType":"209","messageId":"210","endLine":131,"endColumn":20},{"ruleId":"207","severity":1,"message":"221","line":150,"column":23,"nodeType":"209","messageId":"210","endLine":150,"endColumn":32},{"ruleId":"207","severity":1,"message":"222","line":150,"column":46,"nodeType":"209","messageId":"210","endLine":150,"endColumn":51},{"ruleId":"207","severity":1,"message":"223","line":165,"column":10,"nodeType":"209","messageId":"210","endLine":165,"endColumn":21},{"ruleId":"207","severity":1,"message":"224","line":292,"column":10,"nodeType":"209","messageId":"210","endLine":292,"endColumn":20},{"ruleId":"207","severity":1,"message":"225","line":292,"column":22,"nodeType":"209","messageId":"210","endLine":292,"endColumn":35},{"ruleId":"207","severity":1,"message":"226","line":301,"column":10,"nodeType":"209","messageId":"210","endLine":301,"endColumn":17},{"ruleId":"207","severity":1,"message":"227","line":307,"column":10,"nodeType":"209","messageId":"210","endLine":307,"endColumn":26},{"ruleId":"207","severity":1,"message":"228","line":308,"column":10,"nodeType":"209","messageId":"210","endLine":308,"endColumn":23},{"ruleId":"207","severity":1,"message":"229","line":312,"column":10,"nodeType":"209","messageId":"210","endLine":312,"endColumn":24},{"ruleId":"207","severity":1,"message":"230","line":312,"column":26,"nodeType":"209","messageId":"210","endLine":312,"endColumn":43},{"ruleId":"207","severity":1,"message":"231","line":335,"column":9,"nodeType":"209","messageId":"210","endLine":335,"endColumn":17},{"ruleId":"232","severity":1,"message":"233","line":352,"column":13,"nodeType":"234","endLine":448,"endColumn":4},{"ruleId":"232","severity":1,"message":"235","line":772,"column":6,"nodeType":"236","endLine":772,"endColumn":18,"suggestions":"237"},{"ruleId":"207","severity":1,"message":"238","line":917,"column":9,"nodeType":"209","messageId":"210","endLine":917,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":965,"column":31,"nodeType":"241","messageId":"242","endLine":965,"endColumn":33},{"ruleId":"239","severity":1,"message":"240","line":1062,"column":18,"nodeType":"241","messageId":"242","endLine":1062,"endColumn":20},{"ruleId":"239","severity":1,"message":"240","line":1105,"column":55,"nodeType":"241","messageId":"242","endLine":1105,"endColumn":57},{"ruleId":"207","severity":1,"message":"243","line":1113,"column":19,"nodeType":"209","messageId":"210","endLine":1113,"endColumn":35},{"ruleId":"244","severity":1,"message":"245","line":1130,"column":38,"nodeType":"234","messageId":"246","endLine":1130,"endColumn":40},{"ruleId":"207","severity":1,"message":"247","line":1133,"column":19,"nodeType":"209","messageId":"210","endLine":1133,"endColumn":27},{"ruleId":"207","severity":1,"message":"248","line":1171,"column":9,"nodeType":"209","messageId":"210","endLine":1171,"endColumn":19},{"ruleId":"232","severity":1,"message":"249","line":1244,"column":6,"nodeType":"236","endLine":1244,"endColumn":19,"suggestions":"250"},{"ruleId":"232","severity":1,"message":"233","line":1246,"column":13,"nodeType":"234","endLine":1603,"endColumn":4},{"ruleId":"207","severity":1,"message":"251","line":1392,"column":11,"nodeType":"209","messageId":"210","endLine":1392,"endColumn":20},{"ruleId":"244","severity":1,"message":"245","line":1539,"column":49,"nodeType":"234","messageId":"246","endLine":1539,"endColumn":51},{"ruleId":"239","severity":1,"message":"240","line":1563,"column":35,"nodeType":"241","messageId":"242","endLine":1563,"endColumn":37},{"ruleId":"239","severity":1,"message":"240","line":1585,"column":42,"nodeType":"241","messageId":"242","endLine":1585,"endColumn":44},{"ruleId":"239","severity":1,"message":"240","line":1594,"column":42,"nodeType":"241","messageId":"242","endLine":1594,"endColumn":44},{"ruleId":"232","severity":1,"message":"249","line":1603,"column":6,"nodeType":"236","endLine":1603,"endColumn":28,"suggestions":"252"},{"ruleId":"232","severity":1,"message":"249","line":1624,"column":6,"nodeType":"236","endLine":1624,"endColumn":19,"suggestions":"253"},{"ruleId":"207","severity":1,"message":"254","line":1664,"column":9,"nodeType":"209","messageId":"210","endLine":1664,"endColumn":24},{"ruleId":"207","severity":1,"message":"255","line":1672,"column":9,"nodeType":"209","messageId":"210","endLine":1672,"endColumn":27},{"ruleId":"207","severity":1,"message":"256","line":1681,"column":9,"nodeType":"209","messageId":"210","endLine":1681,"endColumn":27},{"ruleId":"207","severity":1,"message":"257","line":1711,"column":9,"nodeType":"209","messageId":"210","endLine":1711,"endColumn":23},{"ruleId":"207","severity":1,"message":"258","line":1715,"column":9,"nodeType":"209","messageId":"210","endLine":1715,"endColumn":17},{"ruleId":"207","severity":1,"message":"259","line":1729,"column":9,"nodeType":"209","messageId":"210","endLine":1729,"endColumn":16},{"ruleId":"239","severity":1,"message":"240","line":1814,"column":24,"nodeType":"241","messageId":"242","endLine":1814,"endColumn":26},{"ruleId":"244","severity":1,"message":"245","line":1857,"column":36,"nodeType":"234","messageId":"246","endLine":1857,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":1859,"column":58,"nodeType":"241","messageId":"242","endLine":1859,"endColumn":60},{"ruleId":"244","severity":1,"message":"245","line":1904,"column":40,"nodeType":"234","messageId":"246","endLine":1904,"endColumn":42},{"ruleId":"244","severity":1,"message":"245","line":1929,"column":40,"nodeType":"234","messageId":"246","endLine":1929,"endColumn":42},{"ruleId":"239","severity":1,"message":"240","line":1959,"column":24,"nodeType":"241","messageId":"242","endLine":1959,"endColumn":26},{"ruleId":"239","severity":1,"message":"240","line":1959,"column":51,"nodeType":"241","messageId":"242","endLine":1959,"endColumn":53},{"ruleId":"239","severity":1,"message":"240","line":1965,"column":31,"nodeType":"241","messageId":"242","endLine":1965,"endColumn":33},{"ruleId":"239","severity":1,"message":"240","line":1965,"column":59,"nodeType":"241","messageId":"242","endLine":1965,"endColumn":61},{"ruleId":"207","severity":1,"message":"222","line":2148,"column":14,"nodeType":"209","messageId":"210","endLine":2148,"endColumn":19},{"ruleId":"207","severity":1,"message":"260","line":2148,"column":21,"nodeType":"209","messageId":"210","endLine":2148,"endColumn":33},{"ruleId":"207","severity":1,"message":"261","line":2155,"column":9,"nodeType":"209","messageId":"210","endLine":2155,"endColumn":15},{"ruleId":"262","severity":1,"message":"263","line":2207,"column":11,"nodeType":"264","endLine":2207,"endColumn":66},{"ruleId":"262","severity":1,"message":"263","line":2214,"column":11,"nodeType":"264","endLine":2214,"endColumn":69},{"ruleId":"262","severity":1,"message":"263","line":2221,"column":11,"nodeType":"264","endLine":2221,"endColumn":67},{"ruleId":"262","severity":1,"message":"263","line":2228,"column":11,"nodeType":"264","endLine":2228,"endColumn":63},{"ruleId":"262","severity":1,"message":"263","line":2242,"column":13,"nodeType":"264","endLine":2242,"endColumn":66},{"ruleId":"262","severity":1,"message":"263","line":2254,"column":13,"nodeType":"264","endLine":2254,"endColumn":64},{"ruleId":"262","severity":1,"message":"263","line":2267,"column":19,"nodeType":"264","endLine":2267,"endColumn":61},{"ruleId":"265","severity":1,"message":"266","line":2270,"column":19,"nodeType":"264","endLine":2270,"endColumn":22},{"ruleId":"239","severity":1,"message":"240","line":2273,"column":32,"nodeType":"241","messageId":"242","endLine":2273,"endColumn":34},{"ruleId":"265","severity":1,"message":"266","line":2273,"column":40,"nodeType":"264","endLine":2273,"endColumn":43},{"ruleId":"262","severity":1,"message":"263","line":2279,"column":25,"nodeType":"264","endLine":2282,"endColumn":27},{"ruleId":"265","severity":1,"message":"266","line":2285,"column":25,"nodeType":"264","endLine":2285,"endColumn":49},{"ruleId":"262","severity":1,"message":"263","line":2291,"column":25,"nodeType":"264","endLine":2291,"endColumn":71},{"ruleId":"265","severity":1,"message":"266","line":2294,"column":25,"nodeType":"264","endLine":2294,"endColumn":49},{"ruleId":"262","severity":1,"message":"263","line":2307,"column":25,"nodeType":"264","endLine":2307,"endColumn":72},{"ruleId":"265","severity":1,"message":"266","line":2310,"column":25,"nodeType":"264","endLine":2310,"endColumn":49},{"ruleId":"262","severity":1,"message":"263","line":2319,"column":25,"nodeType":"264","endLine":2319,"endColumn":75},{"ruleId":"265","severity":1,"message":"266","line":2322,"column":25,"nodeType":"264","endLine":2322,"endColumn":49},{"ruleId":"262","severity":1,"message":"263","line":2335,"column":25,"nodeType":"264","endLine":2335,"endColumn":74},{"ruleId":"265","severity":1,"message":"266","line":2338,"column":25,"nodeType":"264","endLine":2338,"endColumn":49},{"ruleId":"262","severity":1,"message":"263","line":2347,"column":25,"nodeType":"264","endLine":2347,"endColumn":74},{"ruleId":"265","severity":1,"message":"266","line":2350,"column":25,"nodeType":"264","endLine":2350,"endColumn":49},{"ruleId":"262","severity":1,"message":"263","line":2362,"column":25,"nodeType":"264","endLine":2362,"endColumn":72},{"ruleId":"265","severity":1,"message":"266","line":2365,"column":25,"nodeType":"264","endLine":2365,"endColumn":49},{"ruleId":"239","severity":1,"message":"240","line":2368,"column":34,"nodeType":"241","messageId":"242","endLine":2368,"endColumn":36},{"ruleId":"262","severity":1,"message":"263","line":2371,"column":27,"nodeType":"264","endLine":2371,"endColumn":73},{"ruleId":"265","severity":1,"message":"266","line":2374,"column":27,"nodeType":"264","endLine":2374,"endColumn":51},{"ruleId":"262","severity":1,"message":"263","line":2380,"column":29,"nodeType":"264","endLine":2380,"endColumn":76},{"ruleId":"265","severity":1,"message":"266","line":2383,"column":29,"nodeType":"264","endLine":2383,"endColumn":53},{"ruleId":"262","severity":1,"message":"263","line":2394,"column":15,"nodeType":"264","endLine":2394,"endColumn":57},{"ruleId":"265","severity":1,"message":"266","line":2397,"column":15,"nodeType":"264","endLine":2397,"endColumn":18},{"ruleId":"239","severity":1,"message":"240","line":2400,"column":28,"nodeType":"241","messageId":"242","endLine":2400,"endColumn":30},{"ruleId":"265","severity":1,"message":"266","line":2400,"column":36,"nodeType":"264","endLine":2400,"endColumn":39},{"ruleId":"262","severity":1,"message":"263","line":2406,"column":21,"nodeType":"264","endLine":2409,"endColumn":23},{"ruleId":"265","severity":1,"message":"266","line":2412,"column":21,"nodeType":"264","endLine":2412,"endColumn":45},{"ruleId":"262","severity":1,"message":"263","line":2417,"column":21,"nodeType":"264","endLine":2417,"endColumn":67},{"ruleId":"265","severity":1,"message":"266","line":2420,"column":21,"nodeType":"264","endLine":2420,"endColumn":45},{"ruleId":"262","severity":1,"message":"263","line":2425,"column":21,"nodeType":"264","endLine":2425,"endColumn":80},{"ruleId":"265","severity":1,"message":"266","line":2428,"column":21,"nodeType":"264","endLine":2428,"endColumn":45},{"ruleId":"262","severity":1,"message":"263","line":2433,"column":21,"nodeType":"264","endLine":2433,"endColumn":71},{"ruleId":"265","severity":1,"message":"266","line":2436,"column":21,"nodeType":"264","endLine":2436,"endColumn":45},{"ruleId":"262","severity":1,"message":"263","line":2441,"column":21,"nodeType":"264","endLine":2441,"endColumn":81},{"ruleId":"265","severity":1,"message":"266","line":2444,"column":21,"nodeType":"264","endLine":2444,"endColumn":45},{"ruleId":"262","severity":1,"message":"263","line":2449,"column":21,"nodeType":"264","endLine":2449,"endColumn":67},{"ruleId":"265","severity":1,"message":"266","line":2452,"column":21,"nodeType":"264","endLine":2452,"endColumn":45},{"ruleId":"239","severity":1,"message":"240","line":2456,"column":30,"nodeType":"241","messageId":"242","endLine":2456,"endColumn":32},{"ruleId":"262","severity":1,"message":"263","line":2459,"column":23,"nodeType":"264","endLine":2459,"endColumn":69},{"ruleId":"265","severity":1,"message":"266","line":2462,"column":23,"nodeType":"264","endLine":2462,"endColumn":47},{"ruleId":"262","severity":1,"message":"263","line":2468,"column":25,"nodeType":"264","endLine":2468,"endColumn":72},{"ruleId":"265","severity":1,"message":"266","line":2471,"column":25,"nodeType":"264","endLine":2471,"endColumn":49},{"ruleId":"239","severity":1,"message":"240","line":2478,"column":17,"nodeType":"241","messageId":"242","endLine":2478,"endColumn":19},{"ruleId":"265","severity":1,"message":"266","line":2488,"column":23,"nodeType":"264","endLine":2488,"endColumn":26},{"ruleId":"239","severity":1,"message":"240","line":2578,"column":50,"nodeType":"241","messageId":"242","endLine":2578,"endColumn":52},{"ruleId":"239","severity":1,"message":"240","line":2587,"column":50,"nodeType":"241","messageId":"242","endLine":2587,"endColumn":52},{"ruleId":"239","severity":1,"message":"240","line":2596,"column":50,"nodeType":"241","messageId":"242","endLine":2596,"endColumn":52},{"ruleId":"239","severity":1,"message":"240","line":2610,"column":37,"nodeType":"241","messageId":"242","endLine":2610,"endColumn":39},{"ruleId":"239","severity":1,"message":"240","line":2624,"column":37,"nodeType":"241","messageId":"242","endLine":2624,"endColumn":39},{"ruleId":"239","severity":1,"message":"240","line":2632,"column":30,"nodeType":"241","messageId":"242","endLine":2632,"endColumn":32},{"ruleId":"239","severity":1,"message":"240","line":2866,"column":20,"nodeType":"241","messageId":"242","endLine":2866,"endColumn":22},{"ruleId":"265","severity":1,"message":"266","line":2871,"column":21,"nodeType":"264","endLine":2871,"endColumn":24},{"ruleId":"265","severity":1,"message":"266","line":2906,"column":19,"nodeType":"264","endLine":2906,"endColumn":22},{"ruleId":"244","severity":1,"message":"267","line":2941,"column":40,"nodeType":"234","messageId":"268","endLine":2941,"endColumn":42},{"ruleId":"262","severity":1,"message":"263","line":2946,"column":31,"nodeType":"264","endLine":2950,"endColumn":33},{"ruleId":"265","severity":1,"message":"266","line":2953,"column":31,"nodeType":"264","endLine":2953,"endColumn":34},{"ruleId":"262","severity":1,"message":"263","line":2963,"column":31,"nodeType":"264","endLine":2967,"endColumn":33},{"ruleId":"239","severity":1,"message":"240","line":2988,"column":20,"nodeType":"241","messageId":"242","endLine":2988,"endColumn":22},{"ruleId":"265","severity":1,"message":"266","line":2993,"column":21,"nodeType":"264","endLine":2993,"endColumn":24},{"ruleId":"265","severity":1,"message":"266","line":3043,"column":21,"nodeType":"264","endLine":3043,"endColumn":37},{"ruleId":"265","severity":1,"message":"266","line":3046,"column":21,"nodeType":"264","endLine":3046,"endColumn":46},{"ruleId":"265","severity":1,"message":"266","line":3050,"column":21,"nodeType":"264","endLine":3050,"endColumn":37},{"ruleId":"265","severity":1,"message":"266","line":3053,"column":21,"nodeType":"264","endLine":3053,"endColumn":46},{"ruleId":"265","severity":1,"message":"266","line":3057,"column":21,"nodeType":"264","endLine":3057,"endColumn":37},{"ruleId":"265","severity":1,"message":"266","line":3060,"column":21,"nodeType":"264","endLine":3060,"endColumn":46},{"ruleId":"265","severity":1,"message":"266","line":3063,"column":21,"nodeType":"264","endLine":3063,"endColumn":37},{"ruleId":"265","severity":1,"message":"266","line":3064,"column":21,"nodeType":"264","endLine":3064,"endColumn":46},{"ruleId":"265","severity":1,"message":"266","line":3069,"column":21,"nodeType":"264","endLine":3069,"endColumn":37},{"ruleId":"265","severity":1,"message":"266","line":3070,"column":21,"nodeType":"264","endLine":3070,"endColumn":46},{"ruleId":"239","severity":1,"message":"240","line":3079,"column":20,"nodeType":"241","messageId":"242","endLine":3079,"endColumn":22},{"ruleId":"239","severity":1,"message":"240","line":3081,"column":20,"nodeType":"241","messageId":"242","endLine":3081,"endColumn":22},{"ruleId":"265","severity":1,"message":"266","line":3086,"column":19,"nodeType":"264","endLine":3086,"endColumn":22},{"ruleId":"239","severity":1,"message":"269","line":3102,"column":65,"nodeType":"241","messageId":"242","endLine":3102,"endColumn":67},{"ruleId":"239","severity":1,"message":"240","line":3108,"column":20,"nodeType":"241","messageId":"242","endLine":3108,"endColumn":22},{"ruleId":"239","severity":1,"message":"240","line":3207,"column":20,"nodeType":"241","messageId":"242","endLine":3207,"endColumn":22},{"ruleId":"239","severity":1,"message":"240","line":3372,"column":20,"nodeType":"241","messageId":"242","endLine":3372,"endColumn":22},{"ruleId":"265","severity":1,"message":"266","line":3484,"column":29,"nodeType":"264","endLine":3484,"endColumn":32},{"ruleId":"239","severity":1,"message":"240","line":3490,"column":39,"nodeType":"241","messageId":"242","endLine":3490,"endColumn":41},{"ruleId":"239","severity":1,"message":"240","line":3496,"column":39,"nodeType":"241","messageId":"242","endLine":3496,"endColumn":41},{"ruleId":"239","severity":1,"message":"240","line":3502,"column":39,"nodeType":"241","messageId":"242","endLine":3502,"endColumn":41},{"ruleId":"239","severity":1,"message":"240","line":3508,"column":39,"nodeType":"241","messageId":"242","endLine":3508,"endColumn":41},{"ruleId":"262","severity":1,"message":"263","line":3512,"column":11,"nodeType":"264","endLine":3516,"endColumn":13},{"ruleId":"207","severity":1,"message":"270","line":3,"column":10,"nodeType":"209","messageId":"210","endLine":3,"endColumn":16},{"ruleId":"207","severity":1,"message":"271","line":4,"column":17,"nodeType":"209","messageId":"210","endLine":4,"endColumn":25},{"ruleId":"207","severity":1,"message":"272","line":4,"column":27,"nodeType":"209","messageId":"210","endLine":4,"endColumn":36},{"ruleId":"207","severity":1,"message":"273","line":5,"column":10,"nodeType":"209","messageId":"210","endLine":5,"endColumn":20},{"ruleId":"207","severity":1,"message":"274","line":5,"column":22,"nodeType":"209","messageId":"210","endLine":5,"endColumn":32},{"ruleId":"207","severity":1,"message":"275","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":22},{"ruleId":"207","severity":1,"message":"276","line":7,"column":8,"nodeType":"209","messageId":"210","endLine":7,"endColumn":18},{"ruleId":"207","severity":1,"message":"277","line":8,"column":8,"nodeType":"209","messageId":"210","endLine":8,"endColumn":11},{"ruleId":"207","severity":1,"message":"278","line":9,"column":10,"nodeType":"209","messageId":"210","endLine":9,"endColumn":20},{"ruleId":"207","severity":1,"message":"279","line":11,"column":8,"nodeType":"209","messageId":"210","endLine":11,"endColumn":17},{"ruleId":"207","severity":1,"message":"280","line":51,"column":7,"nodeType":"209","messageId":"210","endLine":51,"endColumn":19},{"ruleId":"207","severity":1,"message":"281","line":82,"column":9,"nodeType":"209","messageId":"210","endLine":82,"endColumn":16},{"ruleId":"207","severity":1,"message":"282","line":84,"column":10,"nodeType":"209","messageId":"210","endLine":84,"endColumn":18},{"ruleId":"207","severity":1,"message":"283","line":95,"column":12,"nodeType":"209","messageId":"210","endLine":95,"endColumn":21},{"ruleId":"207","severity":1,"message":"221","line":95,"column":23,"nodeType":"209","messageId":"210","endLine":95,"endColumn":32},{"ruleId":"207","severity":1,"message":"222","line":95,"column":46,"nodeType":"209","messageId":"210","endLine":95,"endColumn":51},{"ruleId":"207","severity":1,"message":"284","line":95,"column":53,"nodeType":"209","messageId":"210","endLine":95,"endColumn":59},{"ruleId":"207","severity":1,"message":"285","line":150,"column":12,"nodeType":"209","messageId":"210","endLine":150,"endColumn":35},{"ruleId":"286","severity":1,"message":"287","line":214,"column":54,"nodeType":"241","messageId":"288","endLine":214,"endColumn":55},{"ruleId":"232","severity":1,"message":"289","line":222,"column":6,"nodeType":"236","endLine":222,"endColumn":8,"suggestions":"290"},{"ruleId":"207","severity":1,"message":"222","line":236,"column":14,"nodeType":"209","messageId":"210","endLine":236,"endColumn":19},{"ruleId":"207","severity":1,"message":"260","line":236,"column":21,"nodeType":"209","messageId":"210","endLine":236,"endColumn":33},{"ruleId":"239","severity":1,"message":"240","line":302,"column":56,"nodeType":"241","messageId":"242","endLine":302,"endColumn":58},{"ruleId":"232","severity":1,"message":"291","line":324,"column":6,"nodeType":"236","endLine":324,"endColumn":23,"suggestions":"292"},{"ruleId":"239","severity":1,"message":"269","line":333,"column":22,"nodeType":"241","messageId":"242","endLine":333,"endColumn":24},{"ruleId":"232","severity":1,"message":"293","line":344,"column":6,"nodeType":"236","endLine":344,"endColumn":20,"suggestions":"294"},{"ruleId":"239","severity":1,"message":"240","line":349,"column":46,"nodeType":"241","messageId":"242","endLine":349,"endColumn":48},{"ruleId":"265","severity":1,"message":"266","line":378,"column":16,"nodeType":"264","endLine":378,"endColumn":48},{"ruleId":"265","severity":1,"message":"266","line":380,"column":19,"nodeType":"264","endLine":380,"endColumn":49},{"ruleId":"265","severity":1,"message":"266","line":393,"column":7,"nodeType":"264","endLine":393,"endColumn":10},{"ruleId":"265","severity":1,"message":"266","line":401,"column":9,"nodeType":"264","endLine":401,"endColumn":30},{"ruleId":"265","severity":1,"message":"266","line":414,"column":11,"nodeType":"264","endLine":414,"endColumn":33},"no-unused-vars","'wombat' is assigned a value but never used.","Identifier","unusedVar","'logo' is defined but never used.","'ReactTooltip' is defined but never used.","'InfoIcon' is defined but never used.","'ReactGA' is defined but never used.","'Bar' is defined but never used.","'Pie' is defined but never used.","'Countdown' is defined but never used.","'alpha' is defined but never used.","'a11yProps' is assigned a value but never used.","'TabPanel' is defined but never used.","'hideModal' is assigned a value but never used.","'login' is assigned a value but never used.","'inliquidity' is assigned a value but never used.","'govrnprice' is assigned a value but never used.","'setGovrnprice' is assigned a value but never used.","'eosusdt' is assigned a value but never used.","'eosetfbalanceind' is assigned a value but never used.","'etfbalanceind' is assigned a value but never used.","'fulldataprices' is assigned a value but never used.","'setFulldataprices' is assigned a value but never used.","'renderer' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useCallback has missing dependencies: 'accountname' and 'depositamounteos'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDepositamounteosetf' needs the current value of 'depositamounteos'.","ArrayExpression",["295"],"'getpricesum' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'eosetfpricearray' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'pricesum' is assigned a value but never used.","'getbalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'displayaccountname'. Either include it or remove the dependency array.",["296"],"'feetouser' is assigned a value but never used.",["297"],["298"],"'gettokenbalance' is assigned a value but never used.","'gettokenbalanceone' is assigned a value but never used.","'gettokenbalancetwo' is assigned a value but never used.","'creationreward' is assigned a value but never used.","'halvings' is assigned a value but never used.","'alldata' is assigned a value but never used.","'displayError' is assigned a value but never used.","'eosetf' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","Expected '!==' and instead saw '!='.","'Slider' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'withStyles' is defined but never used.","'makeStyles' is defined but never used.","'LinearProgress' is defined but never used.","'Typography' is defined but never used.","'Box' is defined but never used.","'Scrollbars' is defined but never used.","'TextField' is defined but never used.","'CustomSlider' is assigned a value but never used.","'classes' is assigned a value but never used.","'polldata' is assigned a value but never used.","'showModal' is assigned a value but never used.","'logout' is assigned a value but never used.","'LinearProgressWithLabel' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has a missing dependency: 'props.fulldata'. Either include it or remove the dependency array.",["299"],"React Hook useEffect has missing dependencies: 'data' and 'prices'. Either include them or remove the dependency array.",["300"],"React Hook useEffect has missing dependencies: 'allocationchange', 'counter', and 'getallocation'. Either include them or remove the dependency array. You can also do a functional update 'setCounter(c => ...)' if you only need 'counter' in the 'setCounter' call.",["301"],{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"304","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},"Update the dependencies array to be: [accountname, activeUser, depositamounteos]",{"range":"315","text":"316"},"Update the dependencies array to be: [accountname, displayaccountname]",{"range":"317","text":"318"},"Update the dependencies array to be: [accountname, displayaccountname, refresh]",{"range":"319","text":"320"},{"range":"321","text":"318"},"Update the dependencies array to be: [props.fulldata]",{"range":"322","text":"323"},"Update the dependencies array to be: [allocationstate, data, prices]",{"range":"324","text":"325"},"Update the dependencies array to be: [allocationchange, counter, data, getallocation, prices]",{"range":"326","text":"327"},[21791,21803],"[accountname, activeUser, depositamounteos]",[35545,35558],"[accountname, displayaccountname]",[46403,46425],"[accountname, displayaccountname, refresh]",[46967,46980],[6170,6172],"[props.fulldata]",[8898,8915],"[allocationstate, data, prices]",[9466,9480],"[allocationchange, counter, data, getallocation, prices]"]